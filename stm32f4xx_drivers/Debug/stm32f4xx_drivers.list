
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001250  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013f8  080013f8  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013f8  080013f8  000201b0  2**0
                  CONTENTS
  4 .ARM          00000000  080013f8  080013f8  000201b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013f8  080013f8  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013fc  080013fc  000113fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08001400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201b0  2**0
                  CONTENTS
 10 .bss          00000054  200001b0  200001b0  000201b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000204  20000204  000201b0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019b7  00000000  00000000  000201da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005fc  00000000  00000000  00021b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00022190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  00022378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b2f  00000000  00000000  00022528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020af  00000000  00000000  00025057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ac09  00000000  00000000  00027106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00031d0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000074c  00000000  00000000  00031d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	200001b0 	.word	0x200001b0
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080013e0 	.word	0x080013e0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	200001b4 	.word	0x200001b4
 80001e4:	080013e0 	.word	0x080013e0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <I2C1_GPIOInits+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000206:	2301      	movs	r3, #1
 8000208:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PU_PD;
 800020a:	2300      	movs	r3, #0
 800020c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_AltFunMode = 4;
 800020e:	2304      	movs	r3, #4
 8000210:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000216:	2306      	movs	r3, #6
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f915 	bl	800044c <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000222:	2307      	movs	r3, #7
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f90f 	bl	800044c <GPIO_Init>


}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <I2C1_Inits+0x2c>)
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <I2C1_Inits+0x30>)
 8000244:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <I2C1_Inits+0x2c>)
 8000248:	2201      	movs	r2, #1
 800024a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <I2C1_Inits+0x2c>)
 800024e:	2268      	movs	r2, #104	; 0x68
 8000250:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <I2C1_Inits+0x2c>)
 8000254:	2200      	movs	r2, #0
 8000256:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <I2C1_Inits+0x2c>)
 800025a:	4a05      	ldr	r2, [pc, #20]	; (8000270 <I2C1_Inits+0x34>)
 800025c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800025e:	4802      	ldr	r0, [pc, #8]	; (8000268 <I2C1_Inits+0x2c>)
 8000260:	f000 fdae 	bl	8000dc0 <I2C_Init>

}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	200001d4 	.word	0x200001d4
 800026c:	40005400 	.word	0x40005400
 8000270:	000186a0 	.word	0x000186a0

08000274 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <GPIO_ButtonInit+0x2c>)
 800027c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800027e:	2300      	movs	r3, #0
 8000280:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000282:	2300      	movs	r3, #0
 8000284:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000286:	2302      	movs	r3, #2
 8000288:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PU_PD;
 800028a:	2300      	movs	r3, #0
 800028c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f8db 	bl	800044c <GPIO_Init>

}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40020000 	.word	0x40020000

080002a4 <main>:


int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	//initialise_monitor_handles();

	//printf("Application is running\n");

	 data_len = strlen((char*)Tx_buf);
 80002a8:	4810      	ldr	r0, [pc, #64]	; (80002ec <main+0x48>)
 80002aa:	f7ff ff9d 	bl	80001e8 <strlen>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <main+0x4c>)
 80002b2:	6013      	str	r3, [r2, #0]

	GPIO_ButtonInit();
 80002b4:	f7ff ffde 	bl	8000274 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002b8:	f7ff ff9e 	bl	80001f8 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002bc:	f7ff ffbe 	bl	800023c <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	480c      	ldr	r0, [pc, #48]	; (80002f4 <main+0x50>)
 80002c4:	f000 fd60 	bl	8000d88 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 80002c8:	2101      	movs	r1, #1
 80002ca:	480a      	ldr	r0, [pc, #40]	; (80002f4 <main+0x50>)
 80002cc:	f000 fc06 	bl	8000adc <I2C_ManageAcking>

	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE); //para aplcações em que o STM32 discovery é disciple devemos setar as configurações de interrupção, lembramos que um disciple sempre está com interrupções ativadas
 80002d0:	2101      	movs	r1, #1
 80002d2:	2020      	movs	r0, #32
 80002d4:	f000 fcd0 	bl	8000c78 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 80002d8:	2101      	movs	r1, #1
 80002da:	201f      	movs	r0, #31
 80002dc:	f000 fccc 	bl	8000c78 <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1,ENABLE); //acima configuramos os tipos de interrupção que queriamos (numero de IRQ handler), agora temos os enables habilitados
 80002e0:	2101      	movs	r1, #1
 80002e2:	4804      	ldr	r0, [pc, #16]	; (80002f4 <main+0x50>)
 80002e4:	f000 fbc7 	bl	8000a76 <I2C_SlaveEnableDisableCallbackEvents>

	//até aqui tudo foi habilitado, agora esse while fica esperando alguma interrupção do Master acontecer e chamar a callback para lidar com a interrupção
	while(1);
 80002e8:	e7fe      	b.n	80002e8 <main+0x44>
 80002ea:	bf00      	nop
 80002ec:	20000000 	.word	0x20000000
 80002f0:	200001cc 	.word	0x200001cc
 80002f4:	40005400 	.word	0x40005400

080002f8 <I2C1_EV_IRQHandler>:
 * DENTRO DE AMBAS ESSAS FUNÇÕES É QUE ALÉM DO HANDLER TEREMOS AS CALLBACKS PARA AVISAR O MASTER O QUE ESTÁ ACONTECENDO DENTRO DA INTERRUPÇÃO
 */


void I2C1_EV_IRQHandler (void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 80002fc:	4802      	ldr	r0, [pc, #8]	; (8000308 <I2C1_EV_IRQHandler+0x10>)
 80002fe:	f000 fe2b 	bl	8000f58 <I2C_EV_IRQHandling>
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	200001d4 	.word	0x200001d4

0800030c <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler (void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 8000310:	4802      	ldr	r0, [pc, #8]	; (800031c <I2C1_ER_IRQHandler+0x10>)
 8000312:	f000 ff01 	bl	8001118 <I2C_ER_IRQHandling>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	200001d4 	.word	0x200001d4

08000320 <I2C_ApplicationEventCallback>:
 * 		WRITE --> 0X52
 * 		READ  <-- MSG
 */

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	70fb      	strb	r3, [r7, #3]
	static uint32_t cnt = 0;
	static uint32_t w_ptr = 0;



	if(AppEv == I2C_ERROR_AF)
 800032c:	78fb      	ldrb	r3, [r7, #3]
 800032e:	2b05      	cmp	r3, #5
 8000330:	d116      	bne.n	8000360 <I2C_ApplicationEventCallback+0x40>
		// slave should understand master needs no more data
		//slave concludes end of Tx


		//if the current active code is 0x52 then dont invalidate
		if(! (CommandCode == 0x52))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <I2C_ApplicationEventCallback+0xc0>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b52      	cmp	r3, #82	; 0x52
 8000338:	d002      	beq.n	8000340 <I2C_ApplicationEventCallback+0x20>
			CommandCode = 0XFF;
 800033a:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <I2C_ApplicationEventCallback+0xc0>)
 800033c:	22ff      	movs	r2, #255	; 0xff
 800033e:	701a      	strb	r2, [r3, #0]

		//reset the cnt variable because its end of transmission
		cnt = 0;
 8000340:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <I2C_ApplicationEventCallback+0xc4>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]

		//Slave concludes it sent all the bytes when w_ptr reaches data_len
		if(w_ptr >= (data_len))
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <I2C_ApplicationEventCallback+0xc8>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	4b28      	ldr	r3, [pc, #160]	; (80003ec <I2C_ApplicationEventCallback+0xcc>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	429a      	cmp	r2, r3
 8000350:	d342      	bcc.n	80003d8 <I2C_ApplicationEventCallback+0xb8>
		{
			w_ptr=0;
 8000352:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <I2C_ApplicationEventCallback+0xc8>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
			CommandCode = 0xff;
 8000358:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <I2C_ApplicationEventCallback+0xc0>)
 800035a:	22ff      	movs	r2, #255	; 0xff
 800035c:	701a      	strb	r2, [r3, #0]
	{
		//Master has sent command code, read it
		 CommandCode = I2C_SlaveReceiveData(I2C1);

	}
}
 800035e:	e03b      	b.n	80003d8 <I2C_ApplicationEventCallback+0xb8>
	}else if (AppEv == I2C_EV_STOP)
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	2b02      	cmp	r3, #2
 8000364:	d103      	bne.n	800036e <I2C_ApplicationEventCallback+0x4e>
		cnt = 0;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <I2C_ApplicationEventCallback+0xc4>)
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
}
 800036c:	e034      	b.n	80003d8 <I2C_ApplicationEventCallback+0xb8>
	}else if (AppEv == I2C_EV_DATA_REQ)
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	2b08      	cmp	r3, #8
 8000372:	d127      	bne.n	80003c4 <I2C_ApplicationEventCallback+0xa4>
		if(CommandCode == 0x51)
 8000374:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <I2C_ApplicationEventCallback+0xc0>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b51      	cmp	r3, #81	; 0x51
 800037a:	d113      	bne.n	80003a4 <I2C_ApplicationEventCallback+0x84>
			I2C_SlaveSendData(I2C1,((data_len >> ((cnt%4) * 8)) & 0xFF));
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <I2C_ApplicationEventCallback+0xcc>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <I2C_ApplicationEventCallback+0xc4>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f003 0303 	and.w	r3, r3, #3
 8000388:	00db      	lsls	r3, r3, #3
 800038a:	fa22 f303 	lsr.w	r3, r2, r3
 800038e:	b2db      	uxtb	r3, r3
 8000390:	4619      	mov	r1, r3
 8000392:	4817      	ldr	r0, [pc, #92]	; (80003f0 <I2C_ApplicationEventCallback+0xd0>)
 8000394:	f000 fdc6 	bl	8000f24 <I2C_SlaveSendData>
		    cnt++;
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <I2C_ApplicationEventCallback+0xc4>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3301      	adds	r3, #1
 800039e:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <I2C_ApplicationEventCallback+0xc4>)
 80003a0:	6013      	str	r3, [r2, #0]
}
 80003a2:	e019      	b.n	80003d8 <I2C_ApplicationEventCallback+0xb8>
		}else if (CommandCode == 0x52)
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <I2C_ApplicationEventCallback+0xc0>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b52      	cmp	r3, #82	; 0x52
 80003aa:	d115      	bne.n	80003d8 <I2C_ApplicationEventCallback+0xb8>
			I2C_SlaveSendData(I2C1,Tx_buf[w_ptr++]);
 80003ac:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <I2C_ApplicationEventCallback+0xc8>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	1c5a      	adds	r2, r3, #1
 80003b2:	490d      	ldr	r1, [pc, #52]	; (80003e8 <I2C_ApplicationEventCallback+0xc8>)
 80003b4:	600a      	str	r2, [r1, #0]
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <I2C_ApplicationEventCallback+0xd4>)
 80003b8:	5cd3      	ldrb	r3, [r2, r3]
 80003ba:	4619      	mov	r1, r3
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <I2C_ApplicationEventCallback+0xd0>)
 80003be:	f000 fdb1 	bl	8000f24 <I2C_SlaveSendData>
}
 80003c2:	e009      	b.n	80003d8 <I2C_ApplicationEventCallback+0xb8>
	}else if (AppEv == I2C_EV_DATA_RCV)
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	2b09      	cmp	r3, #9
 80003c8:	d106      	bne.n	80003d8 <I2C_ApplicationEventCallback+0xb8>
		 CommandCode = I2C_SlaveReceiveData(I2C1);
 80003ca:	4809      	ldr	r0, [pc, #36]	; (80003f0 <I2C_ApplicationEventCallback+0xd0>)
 80003cc:	f000 fdb8 	bl	8000f40 <I2C_SlaveReceiveData>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	4b02      	ldr	r3, [pc, #8]	; (80003e0 <I2C_ApplicationEventCallback+0xc0>)
 80003d6:	701a      	strb	r2, [r3, #0]
}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	200001d0 	.word	0x200001d0
 80003e4:	200001fc 	.word	0x200001fc
 80003e8:	20000200 	.word	0x20000200
 80003ec:	200001cc 	.word	0x200001cc
 80003f0:	40005400 	.word	0x40005400
 80003f4:	20000000 	.word	0x20000000

080003f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	; (8000434 <LoopForever+0x6>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	; (8000438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <LoopForever+0xe>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	; (8000444 <LoopForever+0x16>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000426:	f000 ffb7 	bl	8001398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042a:	f7ff ff3b 	bl	80002a4 <main>

0800042e <LoopForever>:

LoopForever:
    b LoopForever
 800042e:	e7fe      	b.n	800042e <LoopForever>
  ldr   r0, =_estack
 8000430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 800043c:	08001400 	.word	0x08001400
  ldr r2, =_sbss
 8000440:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8000444:	20000204 	.word	0x20000204

08000448 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC_IRQHandler>
	...

0800044c <GPIO_Init>:
 */
#include <stdint.h>
#include "stm32f407xx_gpio_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	/*Vamos separar as funções de init entre Modos Com e Sem interrupção e depois setar
	  cada modo de acordo com a estrutura passada como parâmetro pelo usuário */

	/*Primeiro vamos habilitar o clock dessa GPIO para não esquecermos (muita gente esquece e o periférico não funciona)	 */
	PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2101      	movs	r1, #1
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f9a8 	bl	80007b0 <PeriClockControl>

	//1. Set do Modo
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) <= GPIO_MODE_ANALOG){                                           //Se menor que ANALOG, então não tem interrupção
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	2b03      	cmp	r3, #3
 8000466:	d820      	bhi.n	80004aa <GPIO_Init+0x5e>
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));    //ex se o PinMode = 2, será lido como 10 (em binário) e será shiftado para a direita 2*PinNumber vezes, pois o registrador tem 32 bits e cada pino precisa de 2 bits pro modo
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	461a      	mov	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	791b      	ldrb	r3, [r3, #4]
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	fa02 f303 	lsl.w	r3, r2, r3
 8000478:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                   //Limpando (zerando) os dois bits para ter certeza que estão zerados antes de fazer o bitwise
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	2103      	movs	r1, #3
 8000488:	fa01 f303 	lsl.w	r3, r1, r3
 800048c:	43db      	mvns	r3, r3
 800048e:	4619      	mov	r1, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	400a      	ands	r2, r1
 8000496:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;                                                                       //com a outra estrutura do parametro passado pelo usuário, acessamos diretamente o Base Address do periférico desejado e setamos seu registrador
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	6819      	ldr	r1, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	693a      	ldr	r2, [r7, #16]
 80004a4:	430a      	orrs	r2, r1
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	e0e1      	b.n	800066e <GPIO_Init+0x222>
	}
	else{                                                                                                        //Neste else trataremos as interrupções
		//SYSCFG vai ser usado para escolher qual port vai gerar a interrupção (PORT A, PORT B, PORT C...)
		//EXTI vai ser usado para dizer o modo de interrupção (Falling edge, Rising Edge Trigger ou ambos)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	795b      	ldrb	r3, [r3, #5]
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	d117      	bne.n	80004e2 <GPIO_Init+0x96>
			//Configurar o FTSR (Falling Trigger Selection Register)
			EXTI->FTSR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);                                    //Habilitando a interrupção com Falling Trigger no pino PinNumber
 80004b2:	4b52      	ldr	r3, [pc, #328]	; (80005fc <GPIO_Init+0x1b0>)
 80004b4:	68db      	ldr	r3, [r3, #12]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	7912      	ldrb	r2, [r2, #4]
 80004ba:	4611      	mov	r1, r2
 80004bc:	2201      	movs	r2, #1
 80004be:	408a      	lsls	r2, r1
 80004c0:	4611      	mov	r1, r2
 80004c2:	4a4e      	ldr	r2, [pc, #312]	; (80005fc <GPIO_Init+0x1b0>)
 80004c4:	430b      	orrs	r3, r1
 80004c6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);                                    //Garantindo que o Rising Trigger está desabilitado
 80004c8:	4b4c      	ldr	r3, [pc, #304]	; (80005fc <GPIO_Init+0x1b0>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7912      	ldrb	r2, [r2, #4]
 80004d0:	4611      	mov	r1, r2
 80004d2:	2201      	movs	r2, #1
 80004d4:	408a      	lsls	r2, r1
 80004d6:	43d2      	mvns	r2, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a48      	ldr	r2, [pc, #288]	; (80005fc <GPIO_Init+0x1b0>)
 80004dc:	400b      	ands	r3, r1
 80004de:	6093      	str	r3, [r2, #8]
 80004e0:	e035      	b.n	800054e <GPIO_Init+0x102>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	795b      	ldrb	r3, [r3, #5]
 80004e6:	2b05      	cmp	r3, #5
 80004e8:	d117      	bne.n	800051a <GPIO_Init+0xce>
			//Configurar o RTSR (Rising Trigger Selection Register)
			EXTI->RTSR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);                                    //Habilitando a interrupção com Rising Trigger no pino PinNumber
 80004ea:	4b44      	ldr	r3, [pc, #272]	; (80005fc <GPIO_Init+0x1b0>)
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	7912      	ldrb	r2, [r2, #4]
 80004f2:	4611      	mov	r1, r2
 80004f4:	2201      	movs	r2, #1
 80004f6:	408a      	lsls	r2, r1
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a40      	ldr	r2, [pc, #256]	; (80005fc <GPIO_Init+0x1b0>)
 80004fc:	430b      	orrs	r3, r1
 80004fe:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);                                    //Garantindo que o Falling Trigger está desabilitado
 8000500:	4b3e      	ldr	r3, [pc, #248]	; (80005fc <GPIO_Init+0x1b0>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7912      	ldrb	r2, [r2, #4]
 8000508:	4611      	mov	r1, r2
 800050a:	2201      	movs	r2, #1
 800050c:	408a      	lsls	r2, r1
 800050e:	43d2      	mvns	r2, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a3a      	ldr	r2, [pc, #232]	; (80005fc <GPIO_Init+0x1b0>)
 8000514:	400b      	ands	r3, r1
 8000516:	60d3      	str	r3, [r2, #12]
 8000518:	e019      	b.n	800054e <GPIO_Init+0x102>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	795b      	ldrb	r3, [r3, #5]
 800051e:	2b06      	cmp	r3, #6
 8000520:	d115      	bne.n	800054e <GPIO_Init+0x102>
			//Configurar o FTSR e o RTSR simultaneamente
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);                                    //Habilitando ambas interrupções com Rising e Falling Trigger no pino PinNumber
 8000522:	4b36      	ldr	r3, [pc, #216]	; (80005fc <GPIO_Init+0x1b0>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	7912      	ldrb	r2, [r2, #4]
 800052a:	4611      	mov	r1, r2
 800052c:	2201      	movs	r2, #1
 800052e:	408a      	lsls	r2, r1
 8000530:	4611      	mov	r1, r2
 8000532:	4a32      	ldr	r2, [pc, #200]	; (80005fc <GPIO_Init+0x1b0>)
 8000534:	430b      	orrs	r3, r1
 8000536:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000538:	4b30      	ldr	r3, [pc, #192]	; (80005fc <GPIO_Init+0x1b0>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	7912      	ldrb	r2, [r2, #4]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a2c      	ldr	r2, [pc, #176]	; (80005fc <GPIO_Init+0x1b0>)
 800054a:	430b      	orrs	r3, r1
 800054c:	60d3      	str	r3, [r2, #12]
		}

		//Estamos dentro da interupção: Configurar o SYSCFG_EXTICR (ou seja, fazer o port selection)
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;                                                //isso nos dará qual registrador SYSCFG_EXTICR[temp1] deveremos escolher
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	791b      	ldrb	r3, [r3, #4]
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	75fb      	strb	r3, [r7, #23]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;                                                //isso nos dará qual bloco do registrador temos que colocar os 4 bits
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	f003 0303 	and.w	r3, r3, #3
 800055e:	75bb      	strb	r3, [r7, #22]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a26      	ldr	r2, [pc, #152]	; (8000600 <GPIO_Init+0x1b4>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d060      	beq.n	800062c <GPIO_Init+0x1e0>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a25      	ldr	r2, [pc, #148]	; (8000604 <GPIO_Init+0x1b8>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d040      	beq.n	80005f6 <GPIO_Init+0x1aa>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a23      	ldr	r2, [pc, #140]	; (8000608 <GPIO_Init+0x1bc>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d039      	beq.n	80005f2 <GPIO_Init+0x1a6>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a22      	ldr	r2, [pc, #136]	; (800060c <GPIO_Init+0x1c0>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d032      	beq.n	80005ee <GPIO_Init+0x1a2>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a20      	ldr	r2, [pc, #128]	; (8000610 <GPIO_Init+0x1c4>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d02b      	beq.n	80005ea <GPIO_Init+0x19e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a1f      	ldr	r2, [pc, #124]	; (8000614 <GPIO_Init+0x1c8>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d024      	beq.n	80005e6 <GPIO_Init+0x19a>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <GPIO_Init+0x1cc>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d01d      	beq.n	80005e2 <GPIO_Init+0x196>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a1c      	ldr	r2, [pc, #112]	; (800061c <GPIO_Init+0x1d0>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d016      	beq.n	80005de <GPIO_Init+0x192>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1a      	ldr	r2, [pc, #104]	; (8000620 <GPIO_Init+0x1d4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d00f      	beq.n	80005da <GPIO_Init+0x18e>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a19      	ldr	r2, [pc, #100]	; (8000624 <GPIO_Init+0x1d8>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d008      	beq.n	80005d6 <GPIO_Init+0x18a>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <GPIO_Init+0x1dc>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d101      	bne.n	80005d2 <GPIO_Init+0x186>
 80005ce:	230a      	movs	r3, #10
 80005d0:	e02d      	b.n	800062e <GPIO_Init+0x1e2>
 80005d2:	2300      	movs	r3, #0
 80005d4:	e02b      	b.n	800062e <GPIO_Init+0x1e2>
 80005d6:	2309      	movs	r3, #9
 80005d8:	e029      	b.n	800062e <GPIO_Init+0x1e2>
 80005da:	2308      	movs	r3, #8
 80005dc:	e027      	b.n	800062e <GPIO_Init+0x1e2>
 80005de:	2307      	movs	r3, #7
 80005e0:	e025      	b.n	800062e <GPIO_Init+0x1e2>
 80005e2:	2306      	movs	r3, #6
 80005e4:	e023      	b.n	800062e <GPIO_Init+0x1e2>
 80005e6:	2305      	movs	r3, #5
 80005e8:	e021      	b.n	800062e <GPIO_Init+0x1e2>
 80005ea:	2304      	movs	r3, #4
 80005ec:	e01f      	b.n	800062e <GPIO_Init+0x1e2>
 80005ee:	2303      	movs	r3, #3
 80005f0:	e01d      	b.n	800062e <GPIO_Init+0x1e2>
 80005f2:	2302      	movs	r3, #2
 80005f4:	e01b      	b.n	800062e <GPIO_Init+0x1e2>
 80005f6:	2301      	movs	r3, #1
 80005f8:	e019      	b.n	800062e <GPIO_Init+0x1e2>
 80005fa:	bf00      	nop
 80005fc:	40013c00 	.word	0x40013c00
 8000600:	40020000 	.word	0x40020000
 8000604:	40020400 	.word	0x40020400
 8000608:	40020800 	.word	0x40020800
 800060c:	40020c00 	.word	0x40020c00
 8000610:	40021000 	.word	0x40021000
 8000614:	40021400 	.word	0x40021400
 8000618:	40021800 	.word	0x40021800
 800061c:	40021c00 	.word	0x40021c00
 8000620:	40022000 	.word	0x40022000
 8000624:	40022400 	.word	0x40022400
 8000628:	40022800 	.word	0x40022800
 800062c:	2300      	movs	r3, #0
 800062e:	757b      	strb	r3, [r7, #21]
		SYSCFG_PCLOCK_EN();
 8000630:	4b5c      	ldr	r3, [pc, #368]	; (80007a4 <GPIO_Init+0x358>)
 8000632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000634:	4a5b      	ldr	r2, [pc, #364]	; (80007a4 <GPIO_Init+0x358>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << ( 4*temp2 ));
 800063c:	4a5a      	ldr	r2, [pc, #360]	; (80007a8 <GPIO_Init+0x35c>)
 800063e:	7dfb      	ldrb	r3, [r7, #23]
 8000640:	3302      	adds	r3, #2
 8000642:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000646:	7d79      	ldrb	r1, [r7, #21]
 8000648:	7dbb      	ldrb	r3, [r7, #22]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	fa01 f303 	lsl.w	r3, r1, r3
 8000650:	4618      	mov	r0, r3
 8000652:	4955      	ldr	r1, [pc, #340]	; (80007a8 <GPIO_Init+0x35c>)
 8000654:	7dfb      	ldrb	r3, [r7, #23]
 8000656:	4302      	orrs	r2, r0
 8000658:	3302      	adds	r3, #2
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Habilitar o interrupt delivery using Interrupt Mask Register (IMR) para entregar a interrupção para o NVIC
		//De acordo com o pino escolhido, dependendo do pino o EXTI será entrega para um número no NVIC
		//Ex:Se o pino for GPIOn0, quem será o responsável pela entrega será o EXTIO0, que está
		//ligado fisicamente no IRQ 6 do NVIC e é lá que o processador irá chamar o Handler do ETXIO0, onde colocaremos a função
		//para tratar dessa interupção
		EXTI->IMR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065e:	4b53      	ldr	r3, [pc, #332]	; (80007ac <GPIO_Init+0x360>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	7912      	ldrb	r2, [r2, #4]
 8000666:	4611      	mov	r1, r2
 8000668:	4a50      	ldr	r2, [pc, #320]	; (80007ac <GPIO_Init+0x360>)
 800066a:	430b      	orrs	r3, r1
 800066c:	6013      	str	r3, [r2, #0]
	}
	temp=0;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]

	//2. Set da velocidade
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed) << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	799b      	ldrb	r3, [r3, #6]
 8000676:	461a      	mov	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                   //Limpando (zerando) os dois bits para ter certeza que estão zerados antes de fazer o bitwise
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	689a      	ldr	r2, [r3, #8]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	2103      	movs	r1, #3
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	400a      	ands	r2, r1
 80006a0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6899      	ldr	r1, [r3, #8]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	430a      	orrs	r2, r1
 80006b0:	609a      	str	r2, [r3, #8]
	temp=0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]

	//3. SET de PULLUP PULLDOWN
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	79db      	ldrb	r3, [r3, #7]
 80006ba:	461a      	mov	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                          //Limpando (zerando) os dois bits para ter certeza que estão zerados antes de fazer o bitwise
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	68da      	ldr	r2, [r3, #12]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	2103      	movs	r1, #3
 80006d6:	fa01 f303 	lsl.w	r3, r1, r3
 80006da:	43db      	mvns	r3, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	400a      	ands	r2, r1
 80006e4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68d9      	ldr	r1, [r3, #12]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	430a      	orrs	r2, r1
 80006f4:	60da      	str	r2, [r3, #12]
	temp=0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]

	//4. Configure OUTPUT TYPE, PUSH PULL or OPEN DRAIN
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7a1b      	ldrb	r3, [r3, #8]
 80006fe:	461a      	mov	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                          //Limpando (zerando) o bit para ter certeza que estão zerados antes de fazer o bitwise
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	4619      	mov	r1, r3
 8000716:	2301      	movs	r3, #1
 8000718:	408b      	lsls	r3, r1
 800071a:	43db      	mvns	r3, r3
 800071c:	4619      	mov	r1, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	400a      	ands	r2, r1
 8000724:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6859      	ldr	r1, [r3, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	693a      	ldr	r2, [r7, #16]
 8000732:	430a      	orrs	r2, r1
 8000734:	605a      	str	r2, [r3, #4]
	temp=0;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]

	//5. Configure Alternate Functionality
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) == GPIO_MODE_ALTFN){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	795b      	ldrb	r3, [r3, #5]
 800073e:	2b02      	cmp	r3, #2
 8000740:	d12b      	bne.n	800079a <GPIO_Init+0x34e>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;                                            //sempre igual ou a 0 ou a 1
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->PUPDR &= ~(0xF << (4*temp2));                                                 //Limpando (zerando) os bits para ter certeza que estão zerados antes de fazer o bitwise
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	68da      	ldr	r2, [r3, #12]
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	210f      	movs	r1, #15
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	43db      	mvns	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	400a      	ands	r2, r1
 800076e:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ((pGPIOHandle->GPIO_PinConfig.GPIO_AltFunMode) << (4*temp2));   //cada registrador de 32 bits nesse caso tem 8 pinos, temp1 recebe o resto da divisão inteira por 8 vai dizer se devemos mexer no registrador 0 ou no 1
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	7bfa      	ldrb	r2, [r7, #15]
 8000776:	3208      	adds	r2, #8
 8000778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7a5b      	ldrb	r3, [r3, #9]
 8000780:	461a      	mov	r2, r3
 8000782:	7bbb      	ldrb	r3, [r7, #14]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	4618      	mov	r0, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	7bfa      	ldrb	r2, [r7, #15]
 8000792:	4301      	orrs	r1, r0
 8000794:	3208      	adds	r2, #8
 8000796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		                                                                                                   //dado qual registrador (0 ou 1) temos que saber a posição do pino que queremos mexer (normalizado entre 0 e 8), multiplicamos por 4 pois são 4 bits para right shift
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   //ex, digamos que queremos escrever o modo alternativo correspondente a 1010 no pino 9 do GPIOA. Entao 9/8 = 1, ou seja, registrador AFR[1]. Qual posição? A posição 9%8 = 1, portanto posição 1 do registrador 1
	}																									   //mas como temos 4 bits por posição, temos que dar um shift left na posição multiplicado por 4, então 4*posicao = 4*1 = 4 de shift.
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40013800 	.word	0x40013800
 80007ac:	40013c00 	.word	0x40013c00

080007b0 <PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t En) //Controlar o Clock de um periféico é equivalente a habilitá-lo ou desabilitá-lo
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	if(En == ENABLE){
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d162      	bne.n	8000888 <PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a64      	ldr	r2, [pc, #400]	; (8000958 <PeriClockControl+0x1a8>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <PeriClockControl+0x28>
			GPIOA_PCLOCK_EN();
 80007ca:	4b64      	ldr	r3, [pc, #400]	; (800095c <PeriClockControl+0x1ac>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a63      	ldr	r2, [pc, #396]	; (800095c <PeriClockControl+0x1ac>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOI){
			GPIOI_PCLOCK_DI();
		}
	}
}
 80007d6:	e0b9      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a61      	ldr	r2, [pc, #388]	; (8000960 <PeriClockControl+0x1b0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d106      	bne.n	80007ee <PeriClockControl+0x3e>
			GPIOB_PCLOCK_EN();
 80007e0:	4b5e      	ldr	r3, [pc, #376]	; (800095c <PeriClockControl+0x1ac>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	4a5d      	ldr	r2, [pc, #372]	; (800095c <PeriClockControl+0x1ac>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ec:	e0ae      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a5c      	ldr	r2, [pc, #368]	; (8000964 <PeriClockControl+0x1b4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d106      	bne.n	8000804 <PeriClockControl+0x54>
			GPIOC_PCLOCK_EN();
 80007f6:	4b59      	ldr	r3, [pc, #356]	; (800095c <PeriClockControl+0x1ac>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a58      	ldr	r2, [pc, #352]	; (800095c <PeriClockControl+0x1ac>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000802:	e0a3      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a58      	ldr	r2, [pc, #352]	; (8000968 <PeriClockControl+0x1b8>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d106      	bne.n	800081a <PeriClockControl+0x6a>
			GPIOD_PCLOCK_EN();
 800080c:	4b53      	ldr	r3, [pc, #332]	; (800095c <PeriClockControl+0x1ac>)
 800080e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000810:	4a52      	ldr	r2, [pc, #328]	; (800095c <PeriClockControl+0x1ac>)
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000818:	e098      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a53      	ldr	r2, [pc, #332]	; (800096c <PeriClockControl+0x1bc>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <PeriClockControl+0x80>
			GPIOE_PCLOCK_EN();
 8000822:	4b4e      	ldr	r3, [pc, #312]	; (800095c <PeriClockControl+0x1ac>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a4d      	ldr	r2, [pc, #308]	; (800095c <PeriClockControl+0x1ac>)
 8000828:	f043 0310 	orr.w	r3, r3, #16
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800082e:	e08d      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a4f      	ldr	r2, [pc, #316]	; (8000970 <PeriClockControl+0x1c0>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d106      	bne.n	8000846 <PeriClockControl+0x96>
			GPIOF_PCLOCK_EN();
 8000838:	4b48      	ldr	r3, [pc, #288]	; (800095c <PeriClockControl+0x1ac>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	4a47      	ldr	r2, [pc, #284]	; (800095c <PeriClockControl+0x1ac>)
 800083e:	f043 0320 	orr.w	r3, r3, #32
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000844:	e082      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a4a      	ldr	r2, [pc, #296]	; (8000974 <PeriClockControl+0x1c4>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <PeriClockControl+0xac>
			GPIOG_PCLOCK_EN();
 800084e:	4b43      	ldr	r3, [pc, #268]	; (800095c <PeriClockControl+0x1ac>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a42      	ldr	r2, [pc, #264]	; (800095c <PeriClockControl+0x1ac>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
}
 800085a:	e077      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a46      	ldr	r2, [pc, #280]	; (8000978 <PeriClockControl+0x1c8>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d106      	bne.n	8000872 <PeriClockControl+0xc2>
			GPIOH_PCLOCK_EN();
 8000864:	4b3d      	ldr	r3, [pc, #244]	; (800095c <PeriClockControl+0x1ac>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	4a3c      	ldr	r2, [pc, #240]	; (800095c <PeriClockControl+0x1ac>)
 800086a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000870:	e06c      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a41      	ldr	r2, [pc, #260]	; (800097c <PeriClockControl+0x1cc>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d168      	bne.n	800094c <PeriClockControl+0x19c>
			GPIOI_PCLOCK_EN();
 800087a:	4b38      	ldr	r3, [pc, #224]	; (800095c <PeriClockControl+0x1ac>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a37      	ldr	r2, [pc, #220]	; (800095c <PeriClockControl+0x1ac>)
 8000880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000886:	e061      	b.n	800094c <PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a33      	ldr	r2, [pc, #204]	; (8000958 <PeriClockControl+0x1a8>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <PeriClockControl+0xee>
			GPIOA_PCLOCK_DI();
 8000890:	4b32      	ldr	r3, [pc, #200]	; (800095c <PeriClockControl+0x1ac>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	4a31      	ldr	r2, [pc, #196]	; (800095c <PeriClockControl+0x1ac>)
 8000896:	f023 0301 	bic.w	r3, r3, #1
 800089a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800089c:	e056      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB){
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <PeriClockControl+0x1b0>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d106      	bne.n	80008b4 <PeriClockControl+0x104>
			GPIOB_PCLOCK_DI();
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <PeriClockControl+0x1ac>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a2c      	ldr	r2, [pc, #176]	; (800095c <PeriClockControl+0x1ac>)
 80008ac:	f023 0302 	bic.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b2:	e04b      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a2b      	ldr	r2, [pc, #172]	; (8000964 <PeriClockControl+0x1b4>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d106      	bne.n	80008ca <PeriClockControl+0x11a>
			GPIOC_PCLOCK_DI();
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <PeriClockControl+0x1ac>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4a26      	ldr	r2, [pc, #152]	; (800095c <PeriClockControl+0x1ac>)
 80008c2:	f023 0304 	bic.w	r3, r3, #4
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008c8:	e040      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a26      	ldr	r2, [pc, #152]	; (8000968 <PeriClockControl+0x1b8>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d106      	bne.n	80008e0 <PeriClockControl+0x130>
			GPIOD_PCLOCK_DI();
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <PeriClockControl+0x1ac>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a21      	ldr	r2, [pc, #132]	; (800095c <PeriClockControl+0x1ac>)
 80008d8:	f023 0308 	bic.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008de:	e035      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a22      	ldr	r2, [pc, #136]	; (800096c <PeriClockControl+0x1bc>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d106      	bne.n	80008f6 <PeriClockControl+0x146>
			GPIOE_PCLOCK_DI();
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <PeriClockControl+0x1ac>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <PeriClockControl+0x1ac>)
 80008ee:	f023 0310 	bic.w	r3, r3, #16
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008f4:	e02a      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a1d      	ldr	r2, [pc, #116]	; (8000970 <PeriClockControl+0x1c0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d106      	bne.n	800090c <PeriClockControl+0x15c>
			GPIOF_PCLOCK_DI();
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <PeriClockControl+0x1ac>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a16      	ldr	r2, [pc, #88]	; (800095c <PeriClockControl+0x1ac>)
 8000904:	f023 0320 	bic.w	r3, r3, #32
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
}
 800090a:	e01f      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a19      	ldr	r2, [pc, #100]	; (8000974 <PeriClockControl+0x1c4>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d106      	bne.n	8000922 <PeriClockControl+0x172>
			GPIOG_PCLOCK_DI();
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <PeriClockControl+0x1ac>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <PeriClockControl+0x1ac>)
 800091a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800091e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000920:	e014      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <PeriClockControl+0x1c8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <PeriClockControl+0x188>
			GPIOH_PCLOCK_DI();
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <PeriClockControl+0x1ac>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <PeriClockControl+0x1ac>)
 8000930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000936:	e009      	b.n	800094c <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a10      	ldr	r2, [pc, #64]	; (800097c <PeriClockControl+0x1cc>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d105      	bne.n	800094c <PeriClockControl+0x19c>
			GPIOI_PCLOCK_DI();
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <PeriClockControl+0x1ac>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a05      	ldr	r2, [pc, #20]	; (800095c <PeriClockControl+0x1ac>)
 8000946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40020000 	.word	0x40020000
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400
 8000964:	40020800 	.word	0x40020800
 8000968:	40020c00 	.word	0x40020c00
 800096c:	40021000 	.word	0x40021000
 8000970:	40021400 	.word	0x40021400
 8000974:	40021800 	.word	0x40021800
 8000978:	40021c00 	.word	0x40021c00
 800097c:	40022000 	.word	0x40022000

08000980 <RCC_GetPLLOutputClock>:
		return FLAG_SET;
	}
	return FLAG_RESET;
}

uint32_t RCC_GetPLLOutputClock(){ //essa função ainda não está implementada porque não utilizaremos pll por enquanto
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
	uint32_t var = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
	return var;
 800098a:	687b      	ldr	r3, [r7, #4]
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr

08000996 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t discAddr){
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	460b      	mov	r3, r1
 80009a0:	70fb      	strb	r3, [r7, #3]
	discAddr = (discAddr << 1);                                                        //precisamos deixar o primeiro bit para o read/write bit, por isso esse shift para esquerda
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	70fb      	strb	r3, [r7, #3]
	discAddr &= ~(1 << 0);															   //limpando o bit zero (primeiro bit)
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	f023 0301 	bic.w	r3, r3, #1
 80009ae:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = discAddr;                                                              //discAddr = discipleAddress + r/w Bit
 80009b0:	78fa      	ldrb	r2, [r7, #3]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	611a      	str	r2, [r3, #16]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = (SlaveAddr << 1);                 //fazemos esse shift para esquerda para adicionarmos o bit de read na mensagem também
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80009da:	78fa      	ldrb	r2, [r7, #3]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	611a      	str	r2, [r3, #16]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d01f      	beq.n	8000a40 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode - Lembrando que estamos criando esta função para um master apenas, não para um disciple
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7f1b      	ldrb	r3, [r3, #28]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d112      	bne.n	8000a2e <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6a1b      	ldr	r3, [r3, #32]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d11f      	bne.n	8000a50 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f860 	bl	8000adc <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag ( read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8000a2c:	e010      	b.n	8000a50 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	60fb      	str	r3, [r7, #12]
}
 8000a3e:	e007      	b.n	8000a50 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	60fb      	str	r3, [r7, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);                                                 //simples assim, precisamos apenas levantar o bit 9 do CR
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <I2C_SlaveEnableDisableCallbackEvents>:

void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx,uint8_t EnorDi) //precisamos desta função para habilitar os enables das interrupções (lembra que temos ANDs em que uma das entradas são cada uma dessas flags e a outra a interrupção em si)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == ENABLE)
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d112      	bne.n	8000aae <I2C_SlaveEnableDisableCallbackEvents+0x38>
	 {
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	605a      	str	r2, [r3, #4]
	 {
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
	 }
}
 8000aac:	e011      	b.n	8000ad2 <I2C_SlaveEnableDisableCallbackEvents+0x5c>
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	605a      	str	r2, [r3, #4]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d106      	bne.n	8000afc <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000afa:	e005      	b.n	8000b08 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
	...

08000b14 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
	uint32_t pclk1, system_clock;

	//para sabermos que tipo de clock source estamos lidando temos que ler o RCC_CFGR e ver os bits 2 e 3
	uint8_t temp, ahbp /*AHB1 preescaler*/, apb1p /*APB1 preescaler*/, clk_src; //primeiro puxamos os bits 2 e 3 para os bits 0 e 1, depois zeramos todos menos os dois primeiros
	clk_src = (RCC->CFGR >> 2) & 0x3;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <RCC_GetPCLK1Value+0xa0>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	727b      	strb	r3, [r7, #9]
	01: HSE oscillator used as the system clock
	10: PLL used as the system clock
	11: not applicable
	 */

	if(clk_src == 0){
 8000b28:	7a7b      	ldrb	r3, [r7, #9]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <RCC_GetPCLK1Value+0x20>
		system_clock = 16000000; //se a leitura for 0 então a clock é 16MHz (oscilador interno)
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <RCC_GetPCLK1Value+0xa4>)
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e00b      	b.n	8000b4c <RCC_GetPCLK1Value+0x38>
	}
	else if(clk_src == 1){
 8000b34:	7a7b      	ldrb	r3, [r7, #9]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d102      	bne.n	8000b40 <RCC_GetPCLK1Value+0x2c>
		system_clock = 8000000;  //se a leitura for 1 então a clock é 8MHz (cristal externo)
 8000b3a:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <RCC_GetPCLK1Value+0xa8>)
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	e005      	b.n	8000b4c <RCC_GetPCLK1Value+0x38>
	}
	else if(clk_src == 2){
 8000b40:	7a7b      	ldrb	r3, [r7, #9]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d102      	bne.n	8000b4c <RCC_GetPCLK1Value+0x38>
			system_clock = RCC_GetPLLOutputClock();  //se a leitura for 1 então a clock é 8MHz (cristal externo)
 8000b46:	f7ff ff1b 	bl	8000980 <RCC_GetPLLOutputClock>
 8000b4a:	60f8      	str	r0, [r7, #12]
	//Como vimos no clock tree do reference manual, as fontes de clock passam por 2 divisores de clock antes de irem fornecer
	//clock pro I2C, então devemos descobrir como estão setados os preescalers desses divisores para saber qual clock está indo
	//para o I2C

	//AHB
	temp = (RCC->CFGR >> 4) & 0xF;     //achando o preescaler do AHB1
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <RCC_GetPCLK1Value+0xa0>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 030f 	and.w	r3, r3, #15
 8000b58:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 8000b5a:	7a3b      	ldrb	r3, [r7, #8]
 8000b5c:	2b07      	cmp	r3, #7
 8000b5e:	d802      	bhi.n	8000b66 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;                      //sempre que os bits formarem um número menor que 8 temos um divisor de modulo 1
 8000b60:	2301      	movs	r3, #1
 8000b62:	72fb      	strb	r3, [r7, #11]
 8000b64:	e005      	b.n	8000b72 <RCC_GetPCLK1Value+0x5e>
	}
	else{
		ahbp = AHB_PreScaler[temp-8]; //caso temp seja maior que 8 queremos uma certa posição no ahbp_PreScaler, subtrai-se 8 pra pegar a posição certa
 8000b66:	7a3b      	ldrb	r3, [r7, #8]
 8000b68:	3b08      	subs	r3, #8
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <RCC_GetPCLK1Value+0xac>)
 8000b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b70:	72fb      	strb	r3, [r7, #11]
									   //exemplo: se temp = 8 queremos a posição 0, ou seja, temp-8 e assim por diante
	}

	//APB
	temp = (RCC->CFGR >> 10) & 0x7;     //achando o preescaler do APB1, agora ox7 é suficiente para o masking
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <RCC_GetPCLK1Value+0xa0>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	0a9b      	lsrs	r3, r3, #10
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	723b      	strb	r3, [r7, #8]
	if(temp < 4){
 8000b80:	7a3b      	ldrb	r3, [r7, #8]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d802      	bhi.n	8000b8c <RCC_GetPCLK1Value+0x78>
		apb1p = 1;                      //sempre que os bits formarem um número menor que 8 temos um divisor de modulo 1
 8000b86:	2301      	movs	r3, #1
 8000b88:	72bb      	strb	r3, [r7, #10]
 8000b8a:	e005      	b.n	8000b98 <RCC_GetPCLK1Value+0x84>
	}
	else{
		apb1p = APB_PreScaler[temp-4]; //caso temp seja maior que 4 queremos uma certa posição no ahbp_PreScaler, subtrai-se 4 pra pegar a posição certa
 8000b8c:	7a3b      	ldrb	r3, [r7, #8]
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <RCC_GetPCLK1Value+0xb0>)
 8000b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b96:	72bb      	strb	r3, [r7, #10]
									   //exemplo: se temp = 4 queremos a posição 0, ou seja, temp-4 e assim por diante
	}

	pclk1 = system_clock/ahbp/apb1p;  //finalmente calculamos que clock está indo para o I2C, depois de passar por 2 divisores de clock
 8000b98:	7afb      	ldrb	r3, [r7, #11]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ba0:	7abb      	ldrb	r3, [r7, #10]
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	00f42400 	.word	0x00f42400
 8000bbc:	007a1200 	.word	0x007a1200
 8000bc0:	20000198 	.word	0x20000198
 8000bc4:	200001a8 	.word	0x200001a8

08000bc8 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d120      	bne.n	8000c1c <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <I2C_PeriClockControl+0xa0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d106      	bne.n	8000bf0 <I2C_PeriClockControl+0x28>
			I2C1_PCLOCK_EN();
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000be8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
		}
		else if (pI2Cx == I2C3){
			I2C3_PCLOCK_DI();
		}
	}
}
 8000bee:	e035      	b.n	8000c5c <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <I2C_PeriClockControl+0xa8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d106      	bne.n	8000c06 <I2C_PeriClockControl+0x3e>
			I2C2_PCLOCK_EN();
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000bfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c04:	e02a      	b.n	8000c5c <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3){
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <I2C_PeriClockControl+0xac>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d126      	bne.n	8000c5c <I2C_PeriClockControl+0x94>
			I2C3_PCLOCK_EN();
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000c14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c1a:	e01f      	b.n	8000c5c <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <I2C_PeriClockControl+0xa0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d106      	bne.n	8000c32 <I2C_PeriClockControl+0x6a>
			I2C1_PCLOCK_DI();
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000c2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c30:	e014      	b.n	8000c5c <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2){
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <I2C_PeriClockControl+0xa8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d106      	bne.n	8000c48 <I2C_PeriClockControl+0x80>
			I2C2_PCLOCK_DI();
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000c40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c46:	e009      	b.n	8000c5c <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <I2C_PeriClockControl+0xac>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d105      	bne.n	8000c5c <I2C_PeriClockControl+0x94>
			I2C3_PCLOCK_DI();
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <I2C_PeriClockControl+0xa4>)
 8000c56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c5a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40005400 	.word	0x40005400
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40005800 	.word	0x40005800
 8000c74:	40005c00 	.word	0x40005c00

08000c78 <I2C_IRQInterruptConfig>:
 * o que essas funções fazem é apenas para questão de configuração de uma interrupção externa qualquer que seja,
 * mas a diferenciação feita em cada driver é só pra questão de organizar qual periférico é que está fazendo a configuração
 * do NVIC para interrupção externa
 */
void I2C_IRQInterruptConfig(uint8_t IRQnumber, uint8_t  IRQEn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	71bb      	strb	r3, [r7, #6]
	//A função GPIO_Init irá configurar o SYSCFG (que seta o PORT (A,B...) que deverá gerar a interrupção
	//E o EXTIx que seta o modo de detecção dessa interrupção (Falling ou Rising Trigger)
	//Agora esta função GPIO_IRQConfig irá efetivamente gerar a interrupção do processador,
	//Usando os IRQ set-enable/Clear-enable Registers (ISR e ICR)

	if(IRQEn == ENABLE){ //enable
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d137      	bne.n	8000cfe <I2C_IRQInterruptConfig+0x86>
		if(IRQnumber <= 31){
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b1f      	cmp	r3, #31
 8000c92:	d80a      	bhi.n	8000caa <I2C_IRQInterruptConfig+0x32>
			//programa o ISR0 (Interrupt Set-Enable Register 0) que habilita as interrupções de número 0 até 31.
			//habilitar a interrupção de número IRQnumber significa setar 1 no espaço de memória de índice IRQnumber
			//do registrador  NVIC_ISER0
			*NVIC_ISER0 |= (1 << IRQnumber);
 8000c94:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <I2C_IRQInterruptConfig+0xf8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4a33      	ldr	r2, [pc, #204]	; (8000d70 <I2C_IRQInterruptConfig+0xf8>)
 8000ca4:	430b      	orrs	r3, r1
 8000ca6:	6013      	str	r3, [r2, #0]
		else if(IRQnumber >= 64 && IRQnumber < 96 ){
			//programar o ICR2 (Interrupt Clear-Enable Register 2) que desabilita as interrupções de número 64 até 93
			*NVIC_ICER2 |= (1 << IRQnumber%64);
		}
	}
}
 8000ca8:	e05d      	b.n	8000d66 <I2C_IRQInterruptConfig+0xee>
		else if(IRQnumber > 31 && IRQnumber < 64){ //entre 32 e 63
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b1f      	cmp	r3, #31
 8000cae:	d911      	bls.n	8000cd4 <I2C_IRQInterruptConfig+0x5c>
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b3f      	cmp	r3, #63	; 0x3f
 8000cb4:	d80e      	bhi.n	8000cd4 <I2C_IRQInterruptConfig+0x5c>
			uint8_t temp1 = IRQnumber % 32;       //precisamos disso pois os registradores vão até 32 e os IRQnumbers superam esse valor
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 031f 	and.w	r3, r3, #31
 8000cbc:	73fb      	strb	r3, [r7, #15]
			*NVIC_ISER1 |= (1 << temp1);
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <I2C_IRQInterruptConfig+0xfc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4a29      	ldr	r2, [pc, #164]	; (8000d74 <I2C_IRQInterruptConfig+0xfc>)
 8000cce:	430b      	orrs	r3, r1
 8000cd0:	6013      	str	r3, [r2, #0]
		else if(IRQnumber > 31 && IRQnumber < 64){ //entre 32 e 63
 8000cd2:	e048      	b.n	8000d66 <I2C_IRQInterruptConfig+0xee>
		else if(IRQnumber >= 64 && IRQnumber < 96 ){
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b3f      	cmp	r3, #63	; 0x3f
 8000cd8:	d945      	bls.n	8000d66 <I2C_IRQInterruptConfig+0xee>
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b5f      	cmp	r3, #95	; 0x5f
 8000cde:	d842      	bhi.n	8000d66 <I2C_IRQInterruptConfig+0xee>
			uint8_t temp1 = IRQnumber % 64;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ce6:	73bb      	strb	r3, [r7, #14]
			*NVIC_ISER2 |= (1 << temp1);
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <I2C_IRQInterruptConfig+0x100>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	7bba      	ldrb	r2, [r7, #14]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <I2C_IRQInterruptConfig+0x100>)
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	e033      	b.n	8000d66 <I2C_IRQInterruptConfig+0xee>
		if(IRQnumber <= 31){
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b1f      	cmp	r3, #31
 8000d02:	d80a      	bhi.n	8000d1a <I2C_IRQInterruptConfig+0xa2>
			*NVIC_ICER0 |= (1 << IRQnumber);
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <I2C_IRQInterruptConfig+0x104>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d10:	4611      	mov	r1, r2
 8000d12:	4a1a      	ldr	r2, [pc, #104]	; (8000d7c <I2C_IRQInterruptConfig+0x104>)
 8000d14:	430b      	orrs	r3, r1
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	e025      	b.n	8000d66 <I2C_IRQInterruptConfig+0xee>
		else if(IRQnumber > 31 && IRQnumber < 64){ //entre 32 e 63
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b1f      	cmp	r3, #31
 8000d1e:	d90f      	bls.n	8000d40 <I2C_IRQInterruptConfig+0xc8>
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b3f      	cmp	r3, #63	; 0x3f
 8000d24:	d80c      	bhi.n	8000d40 <I2C_IRQInterruptConfig+0xc8>
			*NVIC_ICER1 |= (1 << IRQnumber%32); //aqui não usarei a variável auxiliar temp1 para ser mais rápido
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <I2C_IRQInterruptConfig+0x108>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	f002 021f 	and.w	r2, r2, #31
 8000d30:	2101      	movs	r1, #1
 8000d32:	fa01 f202 	lsl.w	r2, r1, r2
 8000d36:	4611      	mov	r1, r2
 8000d38:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <I2C_IRQInterruptConfig+0x108>)
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e012      	b.n	8000d66 <I2C_IRQInterruptConfig+0xee>
		else if(IRQnumber >= 64 && IRQnumber < 96 ){
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2b3f      	cmp	r3, #63	; 0x3f
 8000d44:	d90f      	bls.n	8000d66 <I2C_IRQInterruptConfig+0xee>
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b5f      	cmp	r3, #95	; 0x5f
 8000d4a:	d80c      	bhi.n	8000d66 <I2C_IRQInterruptConfig+0xee>
			*NVIC_ICER2 |= (1 << IRQnumber%64);
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <I2C_IRQInterruptConfig+0x10c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	79fa      	ldrb	r2, [r7, #7]
 8000d52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <I2C_IRQInterruptConfig+0x10c>)
 8000d60:	430b      	orrs	r3, r1
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	e7ff      	b.n	8000d66 <I2C_IRQInterruptConfig+0xee>
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000e104 	.word	0xe000e104
 8000d78:	e000e108 	.word	0xe000e108
 8000d7c:	e000e180 	.word	0xe000e180
 8000d80:	e000e184 	.word	0xe000e184
 8000d84:	e000e188 	.word	0xe000e188

08000d88 <I2C_PeripheralControl>:
	/*Como NVIC_PR_BASE_ADDR foi declarado como uint32_t cada +1 que somamos no seu endereço pula 32bits (4 bytes), ou seja
	  iprx pode ser diretamente somando ao NVIC_PR_BASE_ADDR que já pulará 4bytes, fazendo com que seja desnecessário o
	  uso da multiplicação por 4 nesse cenário. Caso o NVIC_PR_BASE_ADDR fosse declarado como uint8_t então o iprx teria que ser multiplicado por 4 mesmo*/
}

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d106      	bne.n	8000da8 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);  //SEMPRE QUE PE ESTIVER EM HIGH AQUELE PERIFÉRICO ESTARÁ HABILITADO, CASO CONTRARIO ESTARÁ DESABILITADO
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f043 0201 	orr.w	r2, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	601a      	str	r2, [r3, #0]
	}
	else{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000da6:	e005      	b.n	8000db4 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f023 0201 	bic.w	r2, r3, #1
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	601a      	str	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
	...

08000dc0 <I2C_Init>:
			Tlow = 16 * CCR * TPCLK1

			thigh + tlow = 25 * CCR * TPCLK1 => 5us = 25 * CCR * 62.5ns
 */

void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	{
		uint32_t tempreg = 0 ;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]

		//enable the clock for the i2cx peripheral
		I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fef8 	bl	8000bc8 <I2C_PeriClockControl>

		//ack control bit
		tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10; //configurando o bit 10 do CR1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7a5b      	ldrb	r3, [r3, #9]
 8000ddc:	029b      	lsls	r3, r3, #10
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
		pI2CHandle->pI2Cx->CR1 = tempreg;                       //aqui atribuimos mesmo o tempreg no CR1 para habilitarmos o ACK automatico
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	601a      	str	r2, [r3, #0]

		//configure the FREQ field of CR2
		tempreg = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
		tempreg |= RCC_GetPCLK1Value() /1000000U ;             //dividimos por 1MHZ porque queremos apenas os digitos mais significativos. Por exemplo se o getValue retornar 16MHz então queremos apenas o numero 16
 8000df2:	f7ff fe8f 	bl	8000b14 <RCC_GetPCLK1Value>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <I2C_Init+0x158>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	0c9b      	lsrs	r3, r3, #18
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
		pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);            //fazemos o masking com o 0x3F porque queremos apenas os 6 primeiros bits vão para o CR2, os outros devem estar zerados
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e10:	605a      	str	r2, [r3, #4]

	   //program the device own address - apenas util se o dispositivo for um disciple
		tempreg = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
		tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;  //Aqui o usuário digitou o endereço que quer atribuir a este MCU no modo disciple, OAR = Own Adress Register
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7a1b      	ldrb	r3, [r3, #8]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << 14);                                     //shiftamos em 1 porque não queremos o primeiro bit, ele não faz parte do adress
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2a:	60fb      	str	r3, [r7, #12]
		pI2CHandle->pI2Cx->OAR1 = tempreg;                         //Também temos que manter o bit 14 em high segundo o reference manual (ele não explica o motivo)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	609a      	str	r2, [r3, #8]

		//CCR calculations - Fazer todo o tramite de dado o modo (slow mode ou fast mode) calcular o CCR value para o output ser a frequencia que queremos
		//após estes calculos então estará produzido o serial clock do I2C
		uint16_t ccr_value = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	817b      	strh	r3, [r7, #10]
		tempreg = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	4a36      	ldr	r2, [pc, #216]	; (8000f1c <I2C_Init+0x15c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d80f      	bhi.n	8000e66 <I2C_Init+0xa6>
		{
			//mode is standard mode
			ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );   //t_total = thigh + tlow = 2 * CCR * TPCLK1 => CCR = t_total/(2*TPCLK1) => CCR = Source_Freq/(2*wanted_speed)
 8000e46:	f7ff fe65 	bl	8000b14 <RCC_GetPCLK1Value>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	817b      	strh	r3, [r7, #10]
			tempreg |= (ccr_value & 0xFFF);                                                     //aqui zeramos os bits acima de 12, pois não nos interessam
 8000e58:	897b      	ldrh	r3, [r7, #10]
 8000e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	e02d      	b.n	8000ec2 <I2C_Init+0x102>
		}else
		{
			//mode is fast mode - o reference manual diz que temos que manter o bit 15 em high
			tempreg |= ( 1 << 15);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e6c:	60fb      	str	r3, [r7, #12]
			tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);             //setamos aqui no bit 14 se queremos slow mode ou fast mode no duty cicle
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	7a9b      	ldrb	r3, [r3, #10]
 8000e72:	039b      	lsls	r3, r3, #14
 8000e74:	461a      	mov	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
			if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7a9b      	ldrb	r3, [r3, #10]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10b      	bne.n	8000e9c <I2C_Init+0xdc>
			{
				ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000e84:	f7ff fe46 	bl	8000b14 <RCC_GetPCLK1Value>
 8000e88:	4601      	mov	r1, r0
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e98:	817b      	strh	r3, [r7, #10]
 8000e9a:	e00c      	b.n	8000eb6 <I2C_Init+0xf6>
			}else
			{
				ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000e9c:	f7ff fe3a 	bl	8000b14 <RCC_GetPCLK1Value>
 8000ea0:	4601      	mov	r1, r0
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	009a      	lsls	r2, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eb4:	817b      	strh	r3, [r7, #10]
			}
			tempreg |= (ccr_value & 0xFFF);   //aqui de novo estamos apenas interessados nos primeiros 12 bits, então zeramos os outros no masking
 8000eb6:	897b      	ldrh	r3, [r7, #10]
 8000eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
		}
		pI2CHandle->pI2Cx->CCR = tempreg;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	61da      	str	r2, [r3, #28]
		 * Por exemplo: Sabemos que o tempo de subida máximo permitido no modo SM é 1000ns (no fast mode é 300ns), mas se nós programamos a frequencia do barramento para trabalhar em
		 * 125ns, que é a própria frequencia do PCKL1 vinda do clock system, temos que colocar no trise register a sequencia de bits dada pela seguinte fórmula:
		 * trise_reg = ((TriseDoModo/PCLK1) + 1)
		 */
		//TRISE Configuration
		if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <I2C_Init+0x15c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d809      	bhi.n	8000ee8 <I2C_Init+0x128>
		{
			//mode is standard mode

			tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000ed4:	f7ff fe1e 	bl	8000b14 <RCC_GetPCLK1Value>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <I2C_Init+0x158>)
 8000edc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee0:	0c9b      	lsrs	r3, r3, #18
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	e00d      	b.n	8000f04 <I2C_Init+0x144>

		}else
		{
			//mode is fast mode
			tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000ee8:	f7ff fe14 	bl	8000b14 <RCC_GetPCLK1Value>
 8000eec:	4603      	mov	r3, r0
 8000eee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ef2:	fb02 f303 	mul.w	r3, r2, r3
 8000ef6:	0a5b      	lsrs	r3, r3, #9
 8000ef8:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <I2C_Init+0x160>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	09db      	lsrs	r3, r3, #7
 8000f00:	3301      	adds	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]

		}

		pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f0e:	621a      	str	r2, [r3, #32]

	}
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	431bde83 	.word	0x431bde83
 8000f1c:	000186a0 	.word	0x000186a0
 8000f20:	00044b83 	.word	0x00044b83

08000f24 <I2C_SlaveSendData>:

	return busystate;
}

void I2C_SlaveSendData(I2C_RegDef_t *pI2C,uint8_t data)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data; //simples assim, quando o master faz o request de dado o disciple só insere dado no data register
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	611a      	str	r2, [r3, #16]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <I2C_SlaveReceiveData>:

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    return (uint8_t) pI2C->DR;   //simples assim, quando o master faz o request de dado o disciple só retorna dado do data register para uma variável declarada no proprio disciple
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	b2db      	uxtb	r3, r3
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <I2C_EV_IRQHandling>:

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	*Resumo do resumo: a interrupção por erro ou por evento acontecerá e esta função decodificará o motivo dela ter acontecido
	*/

	uint8_t temp1,temp2, temp3;

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN); //NOTE QUE COMO JÁ ESTAMOS DENTRO DA CHAMADA DE INTERRUPÇÃO ENTÃO ESTA FLAG JÁ ESTÁ EM ALTO, (JÁ QUE A I2C_EV_IRQHandling SÓ É CHAMADA SE I2C_CR2_ITEVTEN estiver acionada, PORTANTO AQUI DENTRO ESTAMOS FAZENDO APENAS UM DOUBLE CHECK POR PRECAUÇÃO)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2300      	movs	r3, #0
 8000f72:	73bb      	strb	r3, [r7, #14]

	//1. Handle For interrupt generated by SB event
	//	Note : SB flag is only applicable in Master mode
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	737b      	strb	r3, [r7, #13]
	if(temp1 && temp3)
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d01b      	beq.n	8000fc0 <I2C_EV_IRQHandling+0x68>
 8000f88:	7b7b      	ldrb	r3, [r7, #13]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d018      	beq.n	8000fc0 <I2C_EV_IRQHandling+0x68>
	{  //se a interrupção foi trigada pelo evento start bit com a flag FLAG I2C_CR2_ITEVTEN acionada
	   //SB flag está setada em high
		//The interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7f1b      	ldrb	r3, [r3, #28]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d108      	bne.n	8000fa8 <I2C_EV_IRQHandling+0x50>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7f5b      	ldrb	r3, [r3, #29]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	f7ff fcf8 	bl	8000996 <I2C_ExecuteAddressPhaseWrite>
 8000fa6:	e00b      	b.n	8000fc0 <I2C_EV_IRQHandling+0x68>
		}
		else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7f1b      	ldrb	r3, [r3, #28]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d107      	bne.n	8000fc0 <I2C_EV_IRQHandling+0x68>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7f5b      	ldrb	r3, [r3, #29]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f7ff fd00 	bl	80009c0 <I2C_ExecuteAddressPhaseRead>
	}

	//2. Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	737b      	strb	r3, [r7, #13]
	if(temp1 && temp3)
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <I2C_EV_IRQHandling+0x88>
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <I2C_EV_IRQHandling+0x88>
	{
		//ADDR flag está setada em high
		// interrupt is generated because of ADDR event
		//Lembrando que temos que dar um clear no ADDR flag se não o clock fica pra sempre em stretch
		I2C_ClearADDRFlag(pI2CHandle);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fd05 	bl	80009ea <I2C_ClearADDRFlag>
	}

	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	737b      	strb	r3, [r7, #13]
	if(temp1 && temp3)
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d022      	beq.n	800103a <I2C_EV_IRQHandling+0xe2>
 8000ff4:	7b7b      	ldrb	r3, [r7, #13]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d01f      	beq.n	800103a <I2C_EV_IRQHandling+0xe2>
		//BTF flag está setada em high - isso significa que se estemos em uma transmissão então TXE =1 e BTF = 1, então o shift register e o data register estão vazios, podemos transmitir mais uma vez (transmissão anterior terminou, por isso byte transfer finished),
		//isso significa que o TXE junto com o BTF pode ser usado para ver se a transmissão acabou.
		//Mas se estamos em uma recepção, então RXNE = 1 e BTF=1, então Shift register e data register estão ambos cheios e o clock estará em stretch, podemos ler os dados

		//Se chegou aqui então BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX) //se for uma transmissão entrará nessa condicional
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7f1b      	ldrb	r3, [r3, #28]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d11b      	bne.n	800103a <I2C_EV_IRQHandling+0xe2>
		{
			//make sure that TXE is also set .
			if(pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE) )
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100c:	2b00      	cmp	r3, #0
 800100e:	d014      	beq.n	800103a <I2C_EV_IRQHandling+0xe2>
			{
				//BTF and TXE = 1
				if(pI2CHandle->TxLen == 0 )
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d110      	bne.n	800103a <I2C_EV_IRQHandling+0xe2>
				{
					//1. generate the STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)                            //só acionaremos o stop condition se não queremos mais gerar o repeated start, que é o caso em que o master segura o disciple para ele continuar enviando dados, sem que outro master solicite o barramento de dados
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800101e:	2b00      	cmp	r3, #0
 8001020:	d104      	bne.n	800102c <I2C_EV_IRQHandling+0xd4>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fd16 	bl	8000a58 <I2C_GenerateStopCondition>

					//2. reset all the member elements of the handle structure.
					I2C_CloseSendData(pI2CHandle);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f990 	bl	8001352 <I2C_CloseSendData>

					//3. notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_TX_CMPLT);  //DEFINIREMOS A FUNÇÃO DE CALLBACK NO ARQUIVO MAIN DE CADA APLICAÇÃO (GERALMENTE SERÁ A MESMA FUNÇÃO)
 8001032:	2100      	movs	r1, #0
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff f973 	bl	8000320 <I2C_ApplicationEventCallback>
	}

	//4. Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	//The below code block will not be executed by the master since STOPF will not set in master mode, only the slave can execute this block
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);  //isso equivale a um read no SR1 - lembrando que isso só acontece no modo disciple, porque o hardware só mexe nessa flag em slaveMode
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	737b      	strb	r3, [r7, #13]
	if(temp1 && temp3)
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00c      	beq.n	8001068 <I2C_EV_IRQHandling+0x110>
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d009      	beq.n	8001068 <I2C_EV_IRQHandling+0x110>
	{
		//STOPF flag está setada em high
		//STOF flag is set
		//Clear the STOPF, i.e 1) read SR1 2) Write to CR1 ) - fizemos um read no SR1 na atribuição o temp3 logo acima

		pI2CHandle->pI2Cx->CR1 |= 0x0000;  //O uso do or bitwise aqui é para dar um dummy write com a vantagem de não mexer nos dados do control register 1 (CR1).
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	601a      	str	r2, [r3, #0]
										   //

		//Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_STOP); //DEFINIREMOS A FUNÇÃO DE CALLBACK NO ARQUIVO MAIN DE CADA APLICAÇÃO (GERALMENTE SERÁ A MESMA FUNÇÃO)
 8001060:	2102      	movs	r1, #2
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff f95c 	bl	8000320 <I2C_ApplicationEventCallback>

	}
	//5. Handle For interrupt generated by TXE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001074:	737b      	strb	r3, [r7, #13]
	if(temp1 && temp2 && temp3)
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01f      	beq.n	80010bc <I2C_EV_IRQHandling+0x164>
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d01c      	beq.n	80010bc <I2C_EV_IRQHandling+0x164>
 8001082:	7b7b      	ldrb	r3, [r7, #13]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d019      	beq.n	80010bc <I2C_EV_IRQHandling+0x164>
	{
		//TXE flag está setada em high - we have to do data transmission
		//TXE em high é uma indicação de que o data register está vazio e pronto para trabalhar (ser preenchido com um dado, passar para o shift register e o shift register enviar)
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <I2C_EV_IRQHandling+0x14e>
		{
			//The device is master - Lembrando que estamos criando esta função para transmissão feita pelo master apenas, não de um disciple
			//TXE flag is set
			//We have to do the data transmission - o master interrompe o seu própro processador para fazer a transmissão de dados
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7f1b      	ldrb	r3, [r3, #28]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d10e      	bne.n	80010bc <I2C_EV_IRQHandling+0x164>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f8c0 	bl	8001224 <I2C_MasterHandleTXEInterrupt>
 80010a4:	e00a      	b.n	80010bc <I2C_EV_IRQHandling+0x164>
			}
		}else
		{
			//disciple
			//make sure that the disciple is really in transmitter mode - aqui o STM32 é disciple. O master externo faz a interrupção por I2C solicitando um byte e aqui o enviamos
			if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <I2C_EV_IRQHandling+0x164>
			{
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_REQ); //A interrupção ocorreu porque o master quer que o disciple envie byte, com essa callback retornamos pro master os ACKs, status e outras flags necessárias dependendo do caso
 80010b4:	2108      	movs	r1, #8
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff f932 	bl	8000320 <I2C_ApplicationEventCallback>
			}															  //dentro da callback analisaremos qual flag foi passada como parametro e processaremos o evento dessa flag
		}
	}

	//6. Handle For interrupt generated by RXNE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c8:	737b      	strb	r3, [r7, #13]
	if(temp1 && temp2 && temp3)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d01f      	beq.n	8001110 <I2C_EV_IRQHandling+0x1b8>
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d01c      	beq.n	8001110 <I2C_EV_IRQHandling+0x1b8>
 80010d6:	7b7b      	ldrb	r3, [r7, #13]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d019      	beq.n	8001110 <I2C_EV_IRQHandling+0x1b8>
	{
		//RXNE flag está setada em high
		//check device mode .
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <I2C_EV_IRQHandling+0x1a2>
		{
			//The device is master - Lembrando que estamos criando esta função para receive do master apenas, não de um disciple

			//RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7f1b      	ldrb	r3, [r3, #28]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d10e      	bne.n	8001110 <I2C_EV_IRQHandling+0x1b8>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f8b3 	bl	800125e <I2C_MasterHandleRXNEInterrupt>
			{
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV); //A interrupção ocorreu porque o master quer enviar byte para este slave, com essa callback retornamos pro master os ACKs, bytes de informação, status e outras flags necessárias dependendo do caso
			}														      //dentro da callback analisaremos qual flag foi passada como parametro e processaremos o evento dessa flag
		}
	}
}
 80010f8:	e00a      	b.n	8001110 <I2C_EV_IRQHandling+0x1b8>
			if(!(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA)))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d103      	bne.n	8001110 <I2C_EV_IRQHandling+0x1b8>
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV); //A interrupção ocorreu porque o master quer enviar byte para este slave, com essa callback retornamos pro master os ACKs, bytes de informação, status e outras flags necessárias dependendo do caso
 8001108:	2109      	movs	r1, #9
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff f908 	bl	8000320 <I2C_ApplicationEventCallback>
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <I2C_ER_IRQHandling>:

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	 */

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN); //se ocorreu interrupção e essa função foi chamada, essa flag estará levantada, mas faremos um double check dentro dos if por precaução
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001136:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00e      	beq.n	800115c <I2C_ER_IRQHandling+0x44>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00b      	beq.n	800115c <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001152:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8001154:	2103      	movs	r1, #3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff f8e2 	bl	8000320 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001166:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00e      	beq.n	800118c <I2C_ER_IRQHandling+0x74>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00b      	beq.n	800118c <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001182:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);  //dentro da callback analisaremos qual flag foi passada como parametro e processaremos o evento dessa flag
 8001184:	2104      	movs	r1, #4
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff f8ca 	bl	8000320 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001196:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00e      	beq.n	80011bc <I2C_ER_IRQHandling+0xa4>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00b      	beq.n	80011bc <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	695a      	ldr	r2, [r3, #20]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011b2:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 80011b4:	2105      	movs	r1, #5
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff f8b2 	bl	8000320 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011c6:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00e      	beq.n	80011ec <I2C_ER_IRQHandling+0xd4>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00b      	beq.n	80011ec <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011e2:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 80011e4:	2106      	movs	r1, #6
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff f89a 	bl	8000320 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00e      	beq.n	800121c <I2C_ER_IRQHandling+0x104>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00b      	beq.n	800121c <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001212:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 8001214:	2107      	movs	r1, #7
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff f882 	bl	8000320 <I2C_ApplicationEventCallback>
	}

}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <I2C_MasterHandleTXEInterrupt>:

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00f      	beq.n	8001254 <I2C_MasterHandleTXEInterrupt+0x30>
	{
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60da      	str	r2, [r3, #12]

	}

}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle )
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d10b      	bne.n	8001286 <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
	}


	if(pI2CHandle->RxSize > 1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d91a      	bls.n	80012c4 <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d105      	bne.n	80012a2 <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fc1d 	bl	8000adc <I2C_ManageAcking>
		}

			//read DR
			*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	1e5a      	subs	r2, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0 )
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d110      	bne.n	80012ee <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d104      	bne.n	80012e0 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fbbc 	bl	8000a58 <I2C_GenerateStopCondition>

		//2 . Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f808 	bl	80012f6 <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 80012e6:	2101      	movs	r1, #1
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff f819 	bl	8000320 <I2C_ApplicationEventCallback>
	}
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <I2C_CloseReceiveData>:

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
	/*
	 * Para fechar a recepção de dados precisamos limpar todas as flags de interrupção, sejam elas quais forem
	 */

	//Implement the code to disable ITBUFEN Control Bit - aqui eu evito as interrupções devido RXNE e TXE
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800130c:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit - aqui eu evito todas as interrupções do tipo evento
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800131c:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE) //o set de configuração do periférico está configurado como high no enable, então precisamos preservar isso (faremos no proximo comando)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7a5b      	ldrb	r3, [r3, #9]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d105      	bne.n	800134a <I2C_CloseReceiveData+0x54>
	{                                                           //mas como na função de receiveIT fizemos um disable do ACK para avisar ao disciple que não queremos mais dados, então agora precisamos desfazer esse disable reabilitando o ACK
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2101      	movs	r1, #1
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fbc9 	bl	8000adc <I2C_ManageAcking>
	}

}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
	/*
	 * Para fechar a recepção de dados precisamos limpar todas as flags de interrupção, sejam elas quais forem
	 */

	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001368:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001378:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
	...

08001398 <__libc_init_array>:
 8001398:	b570      	push	{r4, r5, r6, lr}
 800139a:	4d0d      	ldr	r5, [pc, #52]	; (80013d0 <__libc_init_array+0x38>)
 800139c:	4c0d      	ldr	r4, [pc, #52]	; (80013d4 <__libc_init_array+0x3c>)
 800139e:	1b64      	subs	r4, r4, r5
 80013a0:	10a4      	asrs	r4, r4, #2
 80013a2:	2600      	movs	r6, #0
 80013a4:	42a6      	cmp	r6, r4
 80013a6:	d109      	bne.n	80013bc <__libc_init_array+0x24>
 80013a8:	4d0b      	ldr	r5, [pc, #44]	; (80013d8 <__libc_init_array+0x40>)
 80013aa:	4c0c      	ldr	r4, [pc, #48]	; (80013dc <__libc_init_array+0x44>)
 80013ac:	f000 f818 	bl	80013e0 <_init>
 80013b0:	1b64      	subs	r4, r4, r5
 80013b2:	10a4      	asrs	r4, r4, #2
 80013b4:	2600      	movs	r6, #0
 80013b6:	42a6      	cmp	r6, r4
 80013b8:	d105      	bne.n	80013c6 <__libc_init_array+0x2e>
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
 80013bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c0:	4798      	blx	r3
 80013c2:	3601      	adds	r6, #1
 80013c4:	e7ee      	b.n	80013a4 <__libc_init_array+0xc>
 80013c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013ca:	4798      	blx	r3
 80013cc:	3601      	adds	r6, #1
 80013ce:	e7f2      	b.n	80013b6 <__libc_init_array+0x1e>
 80013d0:	080013f8 	.word	0x080013f8
 80013d4:	080013f8 	.word	0x080013f8
 80013d8:	080013f8 	.word	0x080013f8
 80013dc:	080013fc 	.word	0x080013fc

080013e0 <_init>:
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	bf00      	nop
 80013e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e6:	bc08      	pop	{r3}
 80013e8:	469e      	mov	lr, r3
 80013ea:	4770      	bx	lr

080013ec <_fini>:
 80013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ee:	bf00      	nop
 80013f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f2:	bc08      	pop	{r3}
 80013f4:	469e      	mov	lr, r3
 80013f6:	4770      	bx	lr
