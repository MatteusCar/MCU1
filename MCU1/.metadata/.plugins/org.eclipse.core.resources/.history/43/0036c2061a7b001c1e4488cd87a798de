/*
 * stm32f407xx_gpio_driver.c
 *
 *  Created on: Jan 17, 2022
 *      Author: matte
 */

/*
 * Init and De-Init
 */
#include <stdint.h>
#include "stm32f407xx_gpio_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
	uint32_t temp;
	/*Vamos separar as funções de init entre Modos Com e Sem interrupção e depois setar
	  cada modo de acordo com a estrutura passada como parâmetro pelo usuário */

	//1. Set do Modo
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) <= GPIO_MODE_ANALOG){
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));    //ex se o PinMode = 2, será lido como 10 e será shiftado para a direita 2*PinNumber vezes, pois o registrador tem 32 bits e cada pino precisa de 2 bits pro modo
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                   //Limpando (zerando) os dois bits para ter certeza que estão zerados antes de fazer o bitwise
		pGPIOHandle->pGPIOx->MODER |= temp;                                                                       //com a outra estrutura do parametro passado pelo usuário, acessamos diretamente o Base Address do periférico desejado e setamos seu registrador
	}
	else{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
			//Configurar o FTSR (Falling Trigger Selection Register)

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
			//Configurar o RTSR (Rising Trigger Selection Register)

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
			//Configurar o FTSR e o RTSR simultaneamente

		}

		//Configurar o SYSCFG_EXTICR (ou seja, fazer o port selection)

		//Habilitar o interrupt delivery using Interrupt Mask Register (IMR)

	}
	temp=0;

	//2. Set da velocidade
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed) << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                   //Limpando (zerando) os dois bits para ter certeza que estão zerados antes de fazer o bitwise
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
	temp=0;

	//3. SET de PULLUP PULLDOWN
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                          //Limpando (zerando) os dois bits para ter certeza que estão zerados antes de fazer o bitwise
	pGPIOHandle->pGPIOx->PUPDR |= temp;
	temp=0;

	//4. Configure OUTPUT TYPE, PUSH PULL or OPEN DRAIN
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                          //Limpando (zerando) o bit para ter certeza que estão zerados antes de fazer o bitwise
	pGPIOHandle->pGPIOx->OTYPER |= temp;
	temp=0;

	//5. Configure Alternate Functionality
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) == GPIO_MODE_ALTFN){
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;                                            //sempre igual ou a 0 ou a 1
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
		pGPIOHandle->pGPIOx->PUPDR &= ~(0xF << (4*temp2));                                                 //Limpando (zerando) os bits para ter certeza que estão zerados antes de fazer o bitwise
		pGPIOHandle->pGPIOx->AFR[temp1] |= ((pGPIOHandle->GPIO_PinConfig.GPIO_AltFunMode) << (4*temp2));   //cada registrador de 32 bits nesse caso tem 8 pinos, temp1 recebe o resto da divisão inteira por 8 vai dizer se devemos mexer no registrador 0 ou no 1
		                                                                                                   //dado qual registrador (0 ou 1) temos que saber a posição do pino que queremos mexer (normalizado entre 0 e 8), multiplicamos por 4 pois são 4 bits para right shift
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   //ex, digamos que queremos escrever o modo alternativo correspondente a 1010 no pino 9 do GPIOA. Entao 9/8 = 1, ou seja, registrador AFR[1]. Qual posição? A posição 9%8 = 1, portanto posição 1 do registrador 1
	}																									   //mas como temos 4 bits por posição, temos que dar um shift left na posição multiplicado por 4, então 4*posicao = 4*1 = 4 de shift.
}
void deInit(GPIO_RegDef_t *pGPIOx)
{
	if(pGPIOx == GPIOA)         GPIOA_REG_RST();
	else if (pGPIOx == GPIOB)	GPIOB_REG_RST();
	else if (pGPIOx == GPIOC)	GPIOC_REG_RST();
	else if (pGPIOx == GPIOD)	GPIOD_REG_RST();
	else if (pGPIOx == GPIOE)	GPIOE_REG_RST();
	else if (pGPIOx == GPIOF)	GPIOF_REG_RST();
	else if (pGPIOx == GPIOG)	GPIOG_REG_RST();
	else if (pGPIOx == GPIOH)	GPIOH_REG_RST();
	else if (pGPIOx == GPIOI)	GPIOI_REG_RST();

}

/*
 * Peripheral Clock Setup
 */
void PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t En)
{
	if(En == ENABLE){
		if(pGPIOx == GPIOA)          GPIOA_PCLOCK_EN();
		else if (pGPIOx == GPIOB)	GPIOB_PCLOCK_EN();
		else if (pGPIOx == GPIOC)	GPIOC_PCLOCK_EN();
		else if (pGPIOx == GPIOD)	GPIOD_PCLOCK_EN();
		else if (pGPIOx == GPIOE)	GPIOE_PCLOCK_EN();
		else if (pGPIOx == GPIOF)	GPIOF_PCLOCK_EN();
		else if (pGPIOx == GPIOG)	GPIOG_PCLOCK_EN();
		else if (pGPIOx == GPIOH)	GPIOH_PCLOCK_EN();
		else if (pGPIOx == GPIOI)	GPIOI_PCLOCK_EN();
	}

	else{
		if(pGPIOx == GPIOA)          GPIOA_PCLOCK_DI();
		else if (pGPIOx == GPIOB)	GPIOB_PCLOCK_DI();
		else if (pGPIOx == GPIOC)	GPIOC_PCLOCK_DI();
		else if (pGPIOx == GPIOD)	GPIOD_PCLOCK_DI();
		else if (pGPIOx == GPIOE)	GPIOE_PCLOCK_DI();
		else if (pGPIOx == GPIOF)	GPIOF_PCLOCK_DI();
		else if (pGPIOx == GPIOG)	GPIOG_PCLOCK_DI();
		else if (pGPIOx == GPIOH)	GPIOH_PCLOCK_DI();
		else if (pGPIOx == GPIOI)	GPIOI_PCLOCK_DI();
	}
}
/*
 * Read and Write
 */
uint8_t ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber)
{
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> pinNumber) & 0x00000001);           //se queremos ler o pino 7 (pinNumber = 7) então (pGPIOx->IDR >> pinNumber) vai shiftar o valor do pino 7 até à primeira casa (que é onde temos acesso para ler) e o mascaramente com o & retorna o valor, armazenando-o em value
	return value;                                                      //apenas a operacao de shift nao muda nada, previsamos fazer o and para retornar o valor que ficou no registrador
}


uint16_t ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{
	uint8_t value;
	value = (uint8_t)(pGPIOx->IDR);
	return value;
}
void WriteFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber, uint8_t value)
{
	if(value == GPIO_PIN_SET)	pGPIOx->ODR |=  (1 << pinNumber);
	else                        pGPIOx->ODR &= ~(1 << pinNumber);
}
void WriteFromInputPort(GPIO_RegDef_t *pGPIOx, uint16_t value)
{
	pGPIOx->ODR |= value;
}
void ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber)
{
	//inverter o bit naquele pino usando o bitwise A XOR B = a ^ B
	pGPIOx->ODR ^= (1 << pinNumber);
}

/*
 * Interrupt Service Routine (ISR) Handling and Interrupt Routine Queue Configuration
 */
void GPIO_IRQConfig(uint8_t IRQnumber, uint8_t IRQpriority, uint8_t  IRQEn);
void GPIO_IRQHandler(uint8_t pin);                                               //Interrupção externa ativda por esse pino será gerenciada
