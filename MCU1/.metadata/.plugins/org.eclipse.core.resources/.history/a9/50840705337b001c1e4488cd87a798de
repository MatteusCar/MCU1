/*
 * stm32f407xx.h
 *
 *  Created on: Jan 15, 2022
 *      Author: matte
 */

#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_

/*
*Base Address of memory
*/
#define	FLASH_BASEADDR			0x08000000
#define SRAM1_BASEADDR			0x20000000
#define SRAM2_BASEADDR			0x2001C000
#define ROM_BASEADDR			0x1FFF0000
#define SRAM					SRAM1_BASEADDR

/*
*Bus Base Address for peripherals
*/
#define PERIPH_BASE			    0x40000000
#define APB1PERIPH_BASEADDR		PERIPH_BASE
#define APB2PERIPH_BASEADDR		0x40010000
#define AHB1PERIPH_BASEADDR		0x40020000
#define AHB2PERIPH_BASEADDR		0x50000000

/*
*Base Address for GPIO
*/
#define GPIOA_BASEADDR			(AHB1PERIPH_BASEADDR + 0x0000)
#define GPIOB_BASEADDR			(AHB1PERIPH_BASEADDR + 0x0400)
#define GPIOC_BASEADDR			(AHB1PERIPH_BASEADDR + 0x0800)
#define GPIOD_BASEADDR			(AHB1PERIPH_BASEADDR + 0x0C00)
#define GPIOE_BASEADDR			(AHB1PERIPH_BASEADDR + 0x1000)
#define GPIOF_BASEADDR			(AHB1PERIPH_BASEADDR + 0x1400)
#define GPIOG_BASEADDR			(AHB1PERIPH_BASEADDR + 0x1800)
#define GPIOH_BASEADDR			(AHB1PERIPH_BASEADDR + 0x1C00)
#define GPIOI_BASEADDR			(AHB1PERIPH_BASEADDR + 0x2000)
#define RCC_BASEADDR            (AHB1PERIPH_BASEADDR + 0x3800)
/*
*Base Address for APB1 BUS peripherals
*/
#define I2C1_BASEADDR			(APB1PERIPH_BASEADDR + 0x5400)
#define I2C2_BASEADDR			(APB1PERIPH_BASEADDR + 0x5800)
#define I2C3_BASEADDR			(APB1PERIPH_BASEADDR + 0x5C00)

#define SPI2_BASEADDR			(APB1PERIPH_BASEADDR + 0x3800)
#define SPI3_BASEADDR			(APB1PERIPH_BASEADDR + 0x3C00)

#define USART2_BASEADDR			(APB1PERIPH_BASEADDR + 0x4400)
#define USART3_BASEADDR			(APB1PERIPH_BASEADDR + 0x4800)
#define UART4_BASEADDR			(APB1PERIPH_BASEADDR + 0x4C00)
#define UART5_BASEADDR			(APB1PERIPH_BASEADDR + 0x5000)

/*
*Base Address for APB2 BUS peripherals
*/
#define SPI1_BASEADDR			(APB2PERIPH_BASEADDR + 0x3000)
#define EXTI_BASEADDR			(APB2PERIPH_BASEADDR + 0x3C00)
#define USART1_BASEADDR			(APB2PERIPH_BASEADDR + 0x1000)
#define USART6_BASEADDR			(APB2PERIPH_BASEADDR + 0x1400)
#define SYSCFG_BASEADDR			(APB2PERIPH_BASEADDR + 0x3800)

typedef struct  //estrutura genérica para uma GPIO qualquer, o acesso à GPIO específica se dará pelo Base Addr a seguir
{

	volatile uint32_t MODER;          //por padrao o compilador colocará cada variável da struct em locais distanciados de 0x04 em sequencia
	volatile uint32_t OTYPER;		 //lembrar que cada uint32_t é um registrador de 32 bits distanciados de 0x04
	volatile uint32_t OSPEEDR;
	volatile uint32_t PUPDR;
	volatile uint32_t IDR;
	volatile uint32_t ODR;
	volatile uint32_t BSRR;
	volatile uint32_t LCKR;
	volatile uint32_t AFR[2];

} GPIO_RegDef_t;

#define GPIOA	((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define GPIOB	((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define GPIOC	((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define GPIOD	((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define GPIOE	((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define GPIOF	((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define GPIOG	((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define GPIOH	((GPIO_RegDef_t*)GPIOH_BASEADDR)
#define GPIOI	((GPIO_RegDef_t*)GPIOI_BASEADDR)

/*GPIO_RegDef_t *pGPIOA = GPIOA;     //ponteiro para o Base Address do GPIOA para acesso rapido
								   //exemplo: pGPIOA->MODER = 25 já acessa o GPIOA direto								    */

/*
*Structure for RCC peripheral
*/

typedef struct
{
	volatile uint32_t CR;
	volatile uint32_t PLLCFGR;
	volatile uint32_t CFGR;
	volatile uint32_t CIR;
	volatile uint32_t AHB1RSTR;
	volatile uint32_t AHB2RSTR;
	volatile uint32_t AHB3RSTR;
	uint32_t RESERVED;
	volatile uint32_t APB1RSTR;
	volatile uint32_t APB2RSTR;
	uint32_t RESERVED1[2];
	volatile uint32_t AHB1ENR;
	volatile uint32_t AHB2ENR;
	volatile uint32_t AHB3ENR;
	uint32_t RESERVED2;
	volatile uint32_t APB1ENR;
	volatile uint32_t APB2ENR;
	uint32_t RESERVED3[2];
	volatile uint32_t AHB1LPENR;
	volatile uint32_t AHB2LPENR;
	volatile uint32_t AHB3LPENR;
	uint32_t RESERVED4;
	volatile uint32_t APB1LPENR;
	volatile uint32_t APB2LPENR;
	uint32_t RESERVED5[2];
	volatile uint32_t BDCR;
	volatile uint32_t CSR;
	uint32_t RESERVED6[2];
	volatile uint32_t SSCGR;
	volatile uint32_t PLLI2SCFGR;
	volatile uint32_t PLLSAICFGR;
	volatile uint32_t DCKCFGR;
} RCC_RegDef_t;

#define RCC    ((RCC_RegDef_t*)RCC_BASEADDR)

#define EXTI   ((EXTI_RegDef_t*)EXTI_BASEADDR)

typedef struct  //estrutura genérica para uma GPIO qualquer, o acesso à GPIO específica se dará pelo Base Addr a seguir
{

	volatile uint32_t IMR;
	volatile uint32_t EMR;
	volatile uint32_t RTSR;
	volatile uint32_t FTSR;
	volatile uint32_t SWIER;
	volatile uint32_t PR;

} EXTI_RegDef_t;

/*
 * SYS_CFG Struct Registers
 */

typedef struct
{

	volatile uint32_t MEMRMP;
	volatile uint32_t PMC;
	volatile uint32_t EXTICR[4];
	uint32_t          RESERVED[2];           //Gap between 0x14 to 0x18 + 0x1C to 0x20 (4 + 4 bytes)
	volatile uint32_t CMPCR;

} SYSCFG_RegDef_t;

#define SYSCFG      ((SYSCFG_RegDef_t*)SYSCFG_BASEADDR)

/*
 * GPIOx Peripheral Clock Enable
 */
#define GPIOA_PCLOCK_EN()    (RCC->AHB1ENR |= (1 << 0))
#define GPIOB_PCLOCK_EN()    (RCC->AHB1ENR |= (1 << 1))
#define GPIOC_PCLOCK_EN()    (RCC->AHB1ENR |= (1 << 2))
#define GPIOD_PCLOCK_EN()    (RCC->AHB1ENR |= (1 << 3))
#define GPIOE_PCLOCK_EN()    (RCC->AHB1ENR |= (1 << 4))
#define GPIOF_PCLOCK_EN()    (RCC->AHB1ENR |= (1 << 5))
#define GPIOG_PCLOCK_EN()    (RCC->AHB1ENR |= (1 << 6))
#define GPIOH_PCLOCK_EN()    (RCC->AHB1ENR |= (1 << 7))
#define GPIOI_PCLOCK_EN()    (RCC->AHB1ENR |= (1 << 8))
#define GPIOJ_PCLOCK_EN()    (RCC->AHB1ENR |= (1 << 9))
#define GPIOK_PCLOCK_EN()    (RCC->AHB1ENR |= (1 << 10))

/*
 * I2Cx Peripheral Clock Enable
 */
#define I2C1_PCLOCK_EN()     (RCC->APB1ENR |= (1 << 21))
#define I2C2_PCLOCK_EN()     (RCC->APB1ENR |= (1 << 22))
#define I2C3_PCLOCK_EN()     (RCC->APB1ENR |= (1 << 23))

/*
 * UARTx Peripheral Clock Enable
 */
#define UART4_PCLOCK_EN()    (RCC->APB1ENR |= (1 << 19))
#define UART5_PCLOCK_EN()    (RCC->APB1ENR |= (1 << 20))
#define UART7_PCLOCK_EN()    (RCC->APB1ENR |= (1 << 30))
#define UART8_PCLOCK_EN()    (RCC->APB1ENR |= (1 << 31))

/*
 * SPI Peripheral Clock Enable
 */
#define SPI1_PCLOCK_EN()	 (RCC->APB2ENR |= (1 << 12))
#define SPI2_PCLOCK_EN()     (RCC->APB1ENR |= (1 << 14))
#define SPI3_PCLOCK_EN()     (RCC->APB1ENR |= (1 << 15))

/*
 * SYSCFG Peripheral Clock Enable
 */
#define SYSCFG_PCLOCK_EN()	 (RCC->APB2ENR |= (1 << 14))

/*
 * USARTx Peripheral Clock
 */
#define USART1_PCLOCK_EN()   (RCC->APB2ENR |= (1 << 4))
#define USART2_PCLOCK_EN()   (RCC->APB1ENR |= (1 << 17))
#define USART3_PCLOCK_EN()   (RCC->APB1ENR |= (1 << 18))
#define USART6_PCLOCK_EN()   (RCC->APB2ENR |= (1 << 5))

//---------------------------------------------------------------------------------------------

/*
 * GPIOx Peripheral Clock Disable
 */
#define GPIOA_PCLOCK_DI()    (RCC->AHB1ENR &= ~(1 << 0))
#define GPIOB_PCLOCK_DI()    (RCC->AHB1ENR &= ~(1 << 1))
#define GPIOC_PCLOCK_DI()    (RCC->AHB1ENR &= ~(1 << 2))
#define GPIOD_PCLOCK_DI()    (RCC->AHB1ENR &= ~(1 << 3))
#define GPIOE_PCLOCK_DI()    (RCC->AHB1ENR &= ~(1 << 4))
#define GPIOF_PCLOCK_DI()    (RCC->AHB1ENR &= ~(1 << 5))
#define GPIOG_PCLOCK_DI()    (RCC->AHB1ENR &= ~(1 << 6))
#define GPIOH_PCLOCK_DI()    (RCC->AHB1ENR &= ~(1 << 7))
#define GPIOI_PCLOCK_DI()    (RCC->AHB1ENR &= ~(1 << 8))
#define GPIOJ_PCLOCK_DI()    (RCC->AHB1ENR &= ~(1 << 9))
#define GPIOK_PCLOCK_DI()    (RCC->AHB1ENR &= ~(1 << 10))

/*
 * I2Cx Peripheral Clock Disable
 */
#define I2C1_PCLOCK_DI()     (RCC->APB1ENR &= ~(1 << 21))
#define I2C2_PCLOCK_DI()     (RCC->APB1ENR &= ~(1 << 22))
#define I2C3_PCLOCK_DI()     (RCC->APB1ENR &= ~(1 << 23))

/*
 * UARTx Peripheral Clock Disable
 */
#define UART4_PCLOCK_DI()    (RCC->APB1ENR &= ~(1 << 19))
#define UART5_PCLOCK_DI()    (RCC->APB1ENR &= ~(1 << 20))
#define UART7_PCLOCK_DI()    (RCC->APB1ENR &= ~(1 << 30))
#define UART8_PCLOCK_DI()    (RCC->APB1ENR &= ~(1 << 31))

/*
 * SPI Peripheral Clock Disable
 */
#define SPI1_PCLOCK_DI()	 (RCC->APB2ENR &= ~(1 << 12))
#define SPI2_PCLOCK_DI()     (RCC->APB1ENR &= ~(1 << 14))
#define SPI3_PCLOCK_DI()     (RCC->APB1ENR &= ~(1 << 15))

/*
 * SYSCFG Peripheral Clock Disable
 */
#define SYSCFG_PCLOCK_DI()	 (RCC->APB2ENR &= ~(1 << 14))

/*
 * USARTx Peripheral Clock Disable
 */
#define USART1_PCLOCK_DI()   (RCC->APB2ENR &= ~(1 << 4))
#define USART2_PCLOCK_DI()   (RCC->APB1ENR &= ~(1 << 17))
#define USART3_PCLOCK_DI()   (RCC->APB1ENR &= ~(1 << 18))
#define USART6_PCLOCK_DI()   (RCC->APB2ENR &= ~(1 << 5))

/*
 * Defining Macros for Reset GPIOx
 */
#define GPIOA_REG_RST()      do{ (RCC->AHB1RSTR |= (1 << 0));  (RCC->AHB1RSTR &= ~(1 << 0)); }  while(0)   //do-while zero condition loop define
#define GPIOB_REG_RST()      do{ (RCC->AHB1RSTR |= (1 << 1));  (RCC->AHB1RSTR &= ~(1 << 1)); }  while(0)
#define GPIOC_REG_RST()      do{ (RCC->AHB1RSTR |= (1 << 2));  (RCC->AHB1RSTR &= ~(1 << 2)); }  while(0)
#define GPIOD_REG_RST()      do{ (RCC->AHB1RSTR |= (1 << 3));  (RCC->AHB1RSTR &= ~(1 << 3)); }  while(0)
#define GPIOE_REG_RST()      do{ (RCC->AHB1RSTR |= (1 << 4));  (RCC->AHB1RSTR &= ~(1 << 4)); }  while(0)
#define GPIOF_REG_RST()      do{ (RCC->AHB1RSTR |= (1 << 5));  (RCC->AHB1RSTR &= ~(1 << 5)); }  while(0)
#define GPIOG_REG_RST()      do{ (RCC->AHB1RSTR |= (1 << 6));  (RCC->AHB1RSTR &= ~(1 << 6)); }  while(0)
#define GPIOH_REG_RST()      do{ (RCC->AHB1RSTR |= (1 << 7));  (RCC->AHB1RSTR &= ~(1 << 7)); }  while(0)
#define GPIOI_REG_RST()      do{ (RCC->AHB1RSTR |= (1 << 8));  (RCC->AHB1RSTR &= ~(1 << 8)); }  while(0)
#define GPIOJ_REG_RST()      do{ (RCC->AHB1RSTR |= (1 << 9));  (RCC->AHB1RSTR &= ~(1 << 9)); }  while(0)
#define GPIOK_REG_RST()      do{ (RCC->AHB1RSTR |= (1 << 10)); (RCC->AHB1RSTR &= ~(1 << 10)); } while(0)


#define GPIO_BASEADDR_TO_CODE(x)          ((x == GPIOA)?0:\          //Se a condição for verdadeira retorna zero,
                                       	   	   (x == GPIOB) ? 1 : \		  //caso contrario cheque a próxima condição, barra invertida
                                       	   	   (x == GPIOC) ? 2 : \	 	  //Serve para checar a próxima condição
                                       	   	   (x == GPIOD) ? 3 : \
                                       	   	   (x == GPIOE) ? 4 : \
                                       	   	   (x == GPIOF) ? 5 : \
          							   	   	   (x == GPIOG) ? 6 : \
                                       	   	   (x == GPIOH) ? 7 : \
                                       	   	   (x == GPIOI) ? 8 : \
                                       	   	   (x == GPIOJ) ? 9 : \
                                       	   	   (x == GPIOK) ? 10 : \)
/*
 * Generic Macros
 */

#define ENABLE         1
#define DISABLE        0
#define SET            ENABLE
#define RESET          DISABLE
#define GPIO_PIN_SET   SET
#define GPIO_PIN_RESET RESET

#include <stm32f407xx_gpio_driver.h>

#endif /* INC_STM32F407XX_H_ */
