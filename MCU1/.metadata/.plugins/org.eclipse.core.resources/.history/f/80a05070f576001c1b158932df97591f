/*
 * stm32f407xx.h
 *
 *  Created on: Jan 15, 2022
 *      Author: matte
 */

#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_

/*
*Base Address of memory
*/
#define	FLASH_BASEADDR			0x08000000
#define SRAM1_BASEADDR			0x20000000
#define SRAM2_BASEADDR			0x2001C000
#define ROM_BASEADDR			0x1FFF0000
#define SRAM					SRAM1_BASEADDR

/*
*Bus Base Address for peripherals
*/
#define PERIPH_BASE			    0x40000000
#define APB1PERIPH_BASEADDR		PERIPH_BASE
#define APB2PERIPH_BASEADDR		0x40010000
#define AHB1PERIPH_BASEADDR		0x40020000
#define AHB2PERIPH_BASEADDR		0x50000000

/*
*Base Address for GPIO
*/
#define GPIOA_BASEADDR			(AHB1PERIPH_BASEADDR + 0x0000)
#define GPIOB_BASEADDR			(AHB1PERIPH_BASEADDR + 0x0400)
#define GPIOC_BASEADDR			(AHB1PERIPH_BASEADDR + 0x0800)
#define GPIOD_BASEADDR			(AHB1PERIPH_BASEADDR + 0x0C00)
#define GPIOE_BASEADDR			(AHB1PERIPH_BASEADDR + 0x1000)
#define GPIOF_BASEADDR			(AHB1PERIPH_BASEADDR + 0x1400)
#define GPIOG_BASEADDR			(AHB1PERIPH_BASEADDR + 0x1800)
#define GPIOH_BASEADDR			(AHB1PERIPH_BASEADDR + 0x1C00)
#define GPIOI_BASEADDR			(AHB1PERIPH_BASEADDR + 0x2000)

/*
*Base Address for APB1 BUS peripherals
*/
#define I2C1_BASEADDR			(APB1PERIPH_BASEADDR + 0x5400)
#define I2C2_BASEADDR			(APB1PERIPH_BASEADDR + 0x5800)
#define I2C3_BASEADDR			(APB1PERIPH_BASEADDR + 0x5C00)

#define SPI2_BASEADDR			(APB1PERIPH_BASEADDR + 0x3800)
#define SPI3_BASEADDR			(APB1PERIPH_BASEADDR + 0x3C00)

#define USART2_BASEADDR			(APB1PERIPH_BASEADDR + 0x4400)
#define USART3_BASEADDR			(APB1PERIPH_BASEADDR + 0x4800)
#define UART4_BASEADDR			(APB1PERIPH_BASEADDR + 0x4C00)
#define UART5_BASEADDR			(APB1PERIPH_BASEADDR + 0x5000)

/*
*Base Address for APB2 BUS peripherals
*/
#define SPI1_BASEADDR			(APB2PERIPH_BASEADDR + 0x3000)
#define EXTI_BASEADDR			(APB2PERIPH_BASEADDR + 0x3C00)
#define USART1_BASEADDR			(APB2PERIPH_BASEADDR + 0x1000)
#define USART6_BASEADDR			(APB2PERIPH_BASEADDR + 0x1400)
#define SYSCFG_BASEADDR			(APB2PERIPH_BASEADDR + 0x3800)
#endif /* INC_STM32F407XX_H_ */

typedef struct  //estrutura genérica para uma GPIO qualquer, o acesso à GPIO específica se dará pelo Base Addr a seguir
{

	volatile uint32_t MODER;          //por padrao o compilador colocará cada variável da struct em locais distanciados de 0x04 em sequencia
	volatile uint32_t OTYPER;		 //lembrar que cada uint32_t é um registrador de 32 bits distanciados de 0x04
	volatile uint32_t OSPEEDR;
	volatile uint32_t PUPDR;
	volatile uint32_t IDR;
	volatile uint32_t ODR;
	volatile uint32_t BSRR;
	volatile uint32_t LCKR;
	volatile uint32_t AFR[2];

} GPIO_RegDef_t;

#define GPIOA	((GPIO_RegDef_t*)GPIOA_BASEADDR);
#define GPIOB	((GPIO_RegDef_t*)GPIOB_BASEADDR);
#define GPIOC	((GPIO_RegDef_t*)GPIOC_BASEADDR);
#define GPIOD	((GPIO_RegDef_t*)GPIOD_BASEADDR);
#define GPIOE	((GPIO_RegDef_t*)GPIOE_BASEADDR);
#define GPIOF	((GPIO_RegDef_t*)GPIOF_BASEADDR);
#define GPIOG	((GPIO_RegDef_t*)GPIOG_BASEADDR);
#define GPIOH	((GPIO_RegDef_t*)GPIOH_BASEADDR);
#define GPIOI	((GPIO_RegDef_t*)GPIOI_BASEADDR);

/*GPIO_RegDef_t *pGPIOA = GPIOA;     //ponteiro para o Base Address do GPIOA para acesso rapido
								   //exemplo: pGPIOA->MODER = 25 já acessa o GPIOA direto
GPIO_RegDef_t *pGPIOB = GPIOB;
GPIO_RegDef_t *pGPIOC = GPIOC;
GPIO_RegDef_t *pGPIOD = GPIOD;
GPIO_RegDef_t *pGPIOE = GPIOE;
GPIO_RegDef_t *pGPIOF = GPIOF;
GPIO_RegDef_t *pGPIOG = GPIOG;
GPIO_RegDef_t *pGPIOH = GPIOH;
GPIO_RegDef_t *pGPIOI = GPIOI;
*/

/*
*sTRUCTURE for RCC peripheral
*/

typedef struct
{
	volatile uint32_t CR;
	volatile uint32_t PLLCFGR;
	volatile uint32_t CFGR;
	volatile uint32_t CIR;
	volatile uint32_t AHB1RSTR;
	volatile uint32_t AHB2RSTR;
	volatile uint32_t AHB3RSTR;
	uint32_t RESERVED;
	volatile uint32_t APB1RSTR;
	volatile uint32_t APB2RSTR;
	uint32_t RESERVED;
	uint32_t RESERVED;
	volatile uint32_t AHB1ENR;
	volatile uint32_t AHB2ENR;
	volatile uint32_t AHB3ENR;
	uint32_t RESERVED;
	volatile uint32_t APB1ENR
	volatile uint32_t APB2ENR;
	uint32_t RESERVED;
	uint32_t RESERVED;
	volatile uint32_t AHB1LPENR;
	volatile uint32_t AHB2LPENR;
	volatile uint32_t AHB3LPENR;
	volatile uint32_t APB1LPENR;
	volatile uint32_t APB2LPENR;
	uint32_t RESERVED;
	uint32_t RESERVED;
	volatile uint32_t BDCR;
	volatile uint32_t CSR;
	uint32_t RESERVED;
	uint32_t RESERVED;
	volatile uint32_t SSCGR;
	volatile uint32_t PLLI2SCFGR;
}



