
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000940  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ae8  08000ae8  00010ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000af4  08000af4  00010afc  2**0
                  CONTENTS
  4 .ARM          00000000  08000af4  08000af4  00010afc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000af4  08000afc  00010afc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000af4  08000af4  00010af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000af8  08000af8  00010af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010afc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010afc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010afc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011cd  00000000  00000000  00010b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003cb  00000000  00000000  00011cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  000120c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  000121f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002510  00000000  00000000  000122f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001793  00000000  00000000  00014800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a122  00000000  00000000  00015f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000404  00000000  00000000  00020108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ad0 	.word	0x08000ad0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000ad0 	.word	0x08000ad0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInit>:
#include <string.h>
#include <stm32f407xx_gpio_driver.h>
#include <stm32f407xx_spi_driver.h>

//Primeiro aqui Dizemos quais pinos de GPIO farão o quê no SPI
void SPI2_GPIOInit(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	//Primeiramente inicializar a GPIO certa (GPIOB com as configurações de SPI2, ou seja, função alternativa 5

	SPIPins.pGPIOx = GPIOB;                                       //pronto, setamos o base addr desejado, agora é setar as configurações
 80001fe:	4b14      	ldr	r3, [pc, #80]	; (8000250 <SPI2_GPIOInit+0x58>)
 8000200:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;        //Aqui dizemos que esse pino terá uma das funções alternativas
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_AltFunMode = 5;                   //Após consulta no datasheet vemos que a função alternativa 5 é a SPI2, como desejado
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PU_PD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//Agor iremos dizer quais GPIOBs irão funcionar como SPI

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000216:	230e      	movs	r3, #14
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f881 	bl	8000324 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000222:	230f      	movs	r3, #15
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f87b 	bl	8000324 <GPIO_Init>

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 800022e:	230d      	movs	r3, #13
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f875 	bl	8000324 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 800023a:	230c      	movs	r3, #12
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f86f 	bl	8000324 <GPIO_Init>
}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020400 	.word	0x40020400

08000254 <SPI2_Init>:

//Aqui Iniciaremos o SPI em si
void SPI2_Init(void){
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;                                       //aqui escolhemos o base addr, para avisar ao programa que queremos o base addr do SPI2
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <SPI2_Init+0x38>)
 800025c:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPI_PinConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;    //Full Duplex
 800025e:	2301      	movs	r3, #1
 8000260:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPI_PinConfig.SPI_DeviceMode = SPI_MODE_MASTER;
 8000262:	2301      	movs	r3, #1
 8000264:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPI_PinConfig.SPI_SCLKSpeed = SPI_SCLK_SPEED_DIV2;  //como estamos usando o cristal interno de 16MHz então o DIV2 vai produzir um SPI com 8MHz e essa é a maior frequência necessária
 8000266:	2300      	movs	r3, #0
 8000268:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPI_PinConfig.SPI_DFF = SPI_DFF_8BITS;              //8 bits de dados por transmissão
 800026a:	2300      	movs	r3, #0
 800026c:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPI_PinConfig.SPI_CPOL = SPI_CPOL_LOW;              //low iddle state
 800026e:	2300      	movs	r3, #0
 8000270:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPI_PinConfig.SPI_CPHA = SPI_CPHA_LOW;              //first edge sampling
 8000272:	2300      	movs	r3, #0
 8000274:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPI_PinConfig.SPI_SSM = SPI_SSM_EN;                 //software disciple selection
 8000276:	2301      	movs	r3, #1
 8000278:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 faeb 	bl	8000858 <SPI_Init>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40003800 	.word	0x40003800

08000290 <main>:

int main(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0

	char userData[] = "hello world";
 8000296:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <main+0x38>)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	ca07      	ldmia	r2, {r0, r1, r2}
 800029c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//Essa função serve para fazer com que as GPIOs escolhidas se comportem como SPI (SPI 2 no caso), qual pino será MISO, MOSI, CLK etc
	SPI2_GPIOInit();
 80002a0:	f7ff ffaa 	bl	80001f8 <SPI2_GPIOInit>

	//Essa função serve para inicializar as configurações propriamente ditas, first ou second edge, Master ou slave, velocidade etc
	SPI2_Init();
 80002a4:	f7ff ffd6 	bl	8000254 <SPI2_Init>

	//Aqui habilita o SPI, após a chamada desta função não é mais possível alterar o funcionamento do SPI, a não ser que a desabilitemos de novo
	SPI_PeripheralControl(SPI2, ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	4808      	ldr	r0, [pc, #32]	; (80002cc <main+0x3c>)
 80002ac:	f000 fbcf 	bl	8000a4e <SPI_PeripheralControl>

	//manda a mensagem que se quer mandar
	SPI_Send(SPI2, (uint8_t*)userData, strlen(userData));  //precisei fazer esse type casting maluco pois estava dando um warning
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ff98 	bl	80001e8 <strlen>
 80002b8:	4602      	mov	r2, r0
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4619      	mov	r1, r3
 80002be:	4803      	ldr	r0, [pc, #12]	; (80002cc <main+0x3c>)
 80002c0:	f000 fb8e 	bl	80009e0 <SPI_Send>

	while(1);
 80002c4:	e7fe      	b.n	80002c4 <main+0x34>
 80002c6:	bf00      	nop
 80002c8:	08000ae8 	.word	0x08000ae8
 80002cc:	40003800 	.word	0x40003800

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 fbc3 	bl	8000a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ffc5 	bl	8000290 <main>

08000306 <LoopForever>:

LoopForever:
    b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	08000afc 	.word	0x08000afc
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>
	...

08000324 <GPIO_Init>:
 */
#include <stdint.h>
#include "stm32f407xx_gpio_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	/*Vamos separar as funções de init entre Modos Com e Sem interrupção e depois setar
	  cada modo de acordo com a estrutura passada como parâmetro pelo usuário */

	/*Primeiro vamos habilitar o clock dessa GPIO para não esquecermos (muita gente esquece e o periférico não funciona)	 */
	PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2101      	movs	r1, #1
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f9a8 	bl	8000688 <PeriClockControl>

	//1. Set do Modo
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) <= GPIO_MODE_ANALOG){                                           //Se menor que ANALOG, então não tem interrupção
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	2b03      	cmp	r3, #3
 800033e:	d820      	bhi.n	8000382 <GPIO_Init+0x5e>
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));    //ex se o PinMode = 2, será lido como 10 (em binário) e será shiftado para a direita 2*PinNumber vezes, pois o registrador tem 32 bits e cada pino precisa de 2 bits pro modo
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	795b      	ldrb	r3, [r3, #5]
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	791b      	ldrb	r3, [r3, #4]
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	fa02 f303 	lsl.w	r3, r2, r3
 8000350:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                   //Limpando (zerando) os dois bits para ter certeza que estão zerados antes de fazer o bitwise
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	791b      	ldrb	r3, [r3, #4]
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	2103      	movs	r1, #3
 8000360:	fa01 f303 	lsl.w	r3, r1, r3
 8000364:	43db      	mvns	r3, r3
 8000366:	4619      	mov	r1, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	400a      	ands	r2, r1
 800036e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;                                                                       //com a outra estrutura do parametro passado pelo usuário, acessamos diretamente o Base Address do periférico desejado e setamos seu registrador
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	6819      	ldr	r1, [r3, #0]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	693a      	ldr	r2, [r7, #16]
 800037c:	430a      	orrs	r2, r1
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	e0e1      	b.n	8000546 <GPIO_Init+0x222>
	}
	else{                                                                                                        //Neste else trataremos as interrupções
		//SYSCFG vai ser usado para escolher qual port vai gerar a interrupção (PORT A, PORT B, PORT C...)
		//EXTI vai ser usado para dizer o modo de interrupção (Falling edge, Rising Edge Trigger ou ambos)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	795b      	ldrb	r3, [r3, #5]
 8000386:	2b04      	cmp	r3, #4
 8000388:	d117      	bne.n	80003ba <GPIO_Init+0x96>
			//Configurar o FTSR (Falling Trigger Selection Register)
			EXTI->FTSR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);                                    //Habilitando a interrupção com Falling Trigger no pino PinNumber
 800038a:	4b52      	ldr	r3, [pc, #328]	; (80004d4 <GPIO_Init+0x1b0>)
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	7912      	ldrb	r2, [r2, #4]
 8000392:	4611      	mov	r1, r2
 8000394:	2201      	movs	r2, #1
 8000396:	408a      	lsls	r2, r1
 8000398:	4611      	mov	r1, r2
 800039a:	4a4e      	ldr	r2, [pc, #312]	; (80004d4 <GPIO_Init+0x1b0>)
 800039c:	430b      	orrs	r3, r1
 800039e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);                                    //Garantindo que o Rising Trigger está desabilitado
 80003a0:	4b4c      	ldr	r3, [pc, #304]	; (80004d4 <GPIO_Init+0x1b0>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	7912      	ldrb	r2, [r2, #4]
 80003a8:	4611      	mov	r1, r2
 80003aa:	2201      	movs	r2, #1
 80003ac:	408a      	lsls	r2, r1
 80003ae:	43d2      	mvns	r2, r2
 80003b0:	4611      	mov	r1, r2
 80003b2:	4a48      	ldr	r2, [pc, #288]	; (80004d4 <GPIO_Init+0x1b0>)
 80003b4:	400b      	ands	r3, r1
 80003b6:	6093      	str	r3, [r2, #8]
 80003b8:	e035      	b.n	8000426 <GPIO_Init+0x102>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	795b      	ldrb	r3, [r3, #5]
 80003be:	2b05      	cmp	r3, #5
 80003c0:	d117      	bne.n	80003f2 <GPIO_Init+0xce>
			//Configurar o RTSR (Rising Trigger Selection Register)
			EXTI->RTSR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);                                    //Habilitando a interrupção com Rising Trigger no pino PinNumber
 80003c2:	4b44      	ldr	r3, [pc, #272]	; (80004d4 <GPIO_Init+0x1b0>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	7912      	ldrb	r2, [r2, #4]
 80003ca:	4611      	mov	r1, r2
 80003cc:	2201      	movs	r2, #1
 80003ce:	408a      	lsls	r2, r1
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a40      	ldr	r2, [pc, #256]	; (80004d4 <GPIO_Init+0x1b0>)
 80003d4:	430b      	orrs	r3, r1
 80003d6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);                                    //Garantindo que o Falling Trigger está desabilitado
 80003d8:	4b3e      	ldr	r3, [pc, #248]	; (80004d4 <GPIO_Init+0x1b0>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	7912      	ldrb	r2, [r2, #4]
 80003e0:	4611      	mov	r1, r2
 80003e2:	2201      	movs	r2, #1
 80003e4:	408a      	lsls	r2, r1
 80003e6:	43d2      	mvns	r2, r2
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <GPIO_Init+0x1b0>)
 80003ec:	400b      	ands	r3, r1
 80003ee:	60d3      	str	r3, [r2, #12]
 80003f0:	e019      	b.n	8000426 <GPIO_Init+0x102>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	795b      	ldrb	r3, [r3, #5]
 80003f6:	2b06      	cmp	r3, #6
 80003f8:	d115      	bne.n	8000426 <GPIO_Init+0x102>
			//Configurar o FTSR e o RTSR simultaneamente
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);                                    //Habilitando ambas interrupções com Rising e Falling Trigger no pino PinNumber
 80003fa:	4b36      	ldr	r3, [pc, #216]	; (80004d4 <GPIO_Init+0x1b0>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	7912      	ldrb	r2, [r2, #4]
 8000402:	4611      	mov	r1, r2
 8000404:	2201      	movs	r2, #1
 8000406:	408a      	lsls	r2, r1
 8000408:	4611      	mov	r1, r2
 800040a:	4a32      	ldr	r2, [pc, #200]	; (80004d4 <GPIO_Init+0x1b0>)
 800040c:	430b      	orrs	r3, r1
 800040e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000410:	4b30      	ldr	r3, [pc, #192]	; (80004d4 <GPIO_Init+0x1b0>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	7912      	ldrb	r2, [r2, #4]
 8000418:	4611      	mov	r1, r2
 800041a:	2201      	movs	r2, #1
 800041c:	408a      	lsls	r2, r1
 800041e:	4611      	mov	r1, r2
 8000420:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <GPIO_Init+0x1b0>)
 8000422:	430b      	orrs	r3, r1
 8000424:	60d3      	str	r3, [r2, #12]
		}

		//Estamos dentro da interupção: Configurar o SYSCFG_EXTICR (ou seja, fazer o port selection)
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;                                                //isso nos dará qual registrador SYSCFG_EXTICR[temp1] deveremos escolher
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	089b      	lsrs	r3, r3, #2
 800042c:	75fb      	strb	r3, [r7, #23]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;                                                //isso nos dará qual bloco do registrador temos que colocar os 4 bits
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	f003 0303 	and.w	r3, r3, #3
 8000436:	75bb      	strb	r3, [r7, #22]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a26      	ldr	r2, [pc, #152]	; (80004d8 <GPIO_Init+0x1b4>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d060      	beq.n	8000504 <GPIO_Init+0x1e0>
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a25      	ldr	r2, [pc, #148]	; (80004dc <GPIO_Init+0x1b8>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d040      	beq.n	80004ce <GPIO_Init+0x1aa>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <GPIO_Init+0x1bc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d039      	beq.n	80004ca <GPIO_Init+0x1a6>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a22      	ldr	r2, [pc, #136]	; (80004e4 <GPIO_Init+0x1c0>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d032      	beq.n	80004c6 <GPIO_Init+0x1a2>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a20      	ldr	r2, [pc, #128]	; (80004e8 <GPIO_Init+0x1c4>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d02b      	beq.n	80004c2 <GPIO_Init+0x19e>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a1f      	ldr	r2, [pc, #124]	; (80004ec <GPIO_Init+0x1c8>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d024      	beq.n	80004be <GPIO_Init+0x19a>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a1d      	ldr	r2, [pc, #116]	; (80004f0 <GPIO_Init+0x1cc>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d01d      	beq.n	80004ba <GPIO_Init+0x196>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a1c      	ldr	r2, [pc, #112]	; (80004f4 <GPIO_Init+0x1d0>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d016      	beq.n	80004b6 <GPIO_Init+0x192>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a1a      	ldr	r2, [pc, #104]	; (80004f8 <GPIO_Init+0x1d4>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d00f      	beq.n	80004b2 <GPIO_Init+0x18e>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a19      	ldr	r2, [pc, #100]	; (80004fc <GPIO_Init+0x1d8>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d008      	beq.n	80004ae <GPIO_Init+0x18a>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a17      	ldr	r2, [pc, #92]	; (8000500 <GPIO_Init+0x1dc>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d101      	bne.n	80004aa <GPIO_Init+0x186>
 80004a6:	230a      	movs	r3, #10
 80004a8:	e02d      	b.n	8000506 <GPIO_Init+0x1e2>
 80004aa:	2300      	movs	r3, #0
 80004ac:	e02b      	b.n	8000506 <GPIO_Init+0x1e2>
 80004ae:	2309      	movs	r3, #9
 80004b0:	e029      	b.n	8000506 <GPIO_Init+0x1e2>
 80004b2:	2308      	movs	r3, #8
 80004b4:	e027      	b.n	8000506 <GPIO_Init+0x1e2>
 80004b6:	2307      	movs	r3, #7
 80004b8:	e025      	b.n	8000506 <GPIO_Init+0x1e2>
 80004ba:	2306      	movs	r3, #6
 80004bc:	e023      	b.n	8000506 <GPIO_Init+0x1e2>
 80004be:	2305      	movs	r3, #5
 80004c0:	e021      	b.n	8000506 <GPIO_Init+0x1e2>
 80004c2:	2304      	movs	r3, #4
 80004c4:	e01f      	b.n	8000506 <GPIO_Init+0x1e2>
 80004c6:	2303      	movs	r3, #3
 80004c8:	e01d      	b.n	8000506 <GPIO_Init+0x1e2>
 80004ca:	2302      	movs	r3, #2
 80004cc:	e01b      	b.n	8000506 <GPIO_Init+0x1e2>
 80004ce:	2301      	movs	r3, #1
 80004d0:	e019      	b.n	8000506 <GPIO_Init+0x1e2>
 80004d2:	bf00      	nop
 80004d4:	40013c00 	.word	0x40013c00
 80004d8:	40020000 	.word	0x40020000
 80004dc:	40020400 	.word	0x40020400
 80004e0:	40020800 	.word	0x40020800
 80004e4:	40020c00 	.word	0x40020c00
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40021400 	.word	0x40021400
 80004f0:	40021800 	.word	0x40021800
 80004f4:	40021c00 	.word	0x40021c00
 80004f8:	40022000 	.word	0x40022000
 80004fc:	40022400 	.word	0x40022400
 8000500:	40022800 	.word	0x40022800
 8000504:	2300      	movs	r3, #0
 8000506:	757b      	strb	r3, [r7, #21]
		SYSCFG_PCLOCK_EN();
 8000508:	4b5c      	ldr	r3, [pc, #368]	; (800067c <GPIO_Init+0x358>)
 800050a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800050c:	4a5b      	ldr	r2, [pc, #364]	; (800067c <GPIO_Init+0x358>)
 800050e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000512:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << ( 4*temp2 ));
 8000514:	4a5a      	ldr	r2, [pc, #360]	; (8000680 <GPIO_Init+0x35c>)
 8000516:	7dfb      	ldrb	r3, [r7, #23]
 8000518:	3302      	adds	r3, #2
 800051a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800051e:	7d79      	ldrb	r1, [r7, #21]
 8000520:	7dbb      	ldrb	r3, [r7, #22]
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	fa01 f303 	lsl.w	r3, r1, r3
 8000528:	4618      	mov	r0, r3
 800052a:	4955      	ldr	r1, [pc, #340]	; (8000680 <GPIO_Init+0x35c>)
 800052c:	7dfb      	ldrb	r3, [r7, #23]
 800052e:	4302      	orrs	r2, r0
 8000530:	3302      	adds	r3, #2
 8000532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Habilitar o interrupt delivery using Interrupt Mask Register (IMR) para entregar a interrupção para o NVIC
		//De acordo com o pino escolhido, dependendo do pino o EXTI será entrega para um número no NVIC
		//Ex:Se o pino for GPIOn0, quem será o responsável pela entrega será o EXTIO0, que está
		//ligado fisicamente no IRQ 6 do NVIC e é lá que o processador irá chamar o Handler do ETXIO0, onde colocaremos a função
		//para tratar dessa interupção
		EXTI->IMR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000536:	4b53      	ldr	r3, [pc, #332]	; (8000684 <GPIO_Init+0x360>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	7912      	ldrb	r2, [r2, #4]
 800053e:	4611      	mov	r1, r2
 8000540:	4a50      	ldr	r2, [pc, #320]	; (8000684 <GPIO_Init+0x360>)
 8000542:	430b      	orrs	r3, r1
 8000544:	6013      	str	r3, [r2, #0]
	}
	temp=0;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]

	//2. Set da velocidade
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed) << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	799b      	ldrb	r3, [r3, #6]
 800054e:	461a      	mov	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                   //Limpando (zerando) os dois bits para ter certeza que estão zerados antes de fazer o bitwise
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	689a      	ldr	r2, [r3, #8]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	2103      	movs	r1, #3
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	400a      	ands	r2, r1
 8000578:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6899      	ldr	r1, [r3, #8]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	693a      	ldr	r2, [r7, #16]
 8000586:	430a      	orrs	r2, r1
 8000588:	609a      	str	r2, [r3, #8]
	temp=0;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]

	//3. SET de PULLUP PULLDOWN
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	79db      	ldrb	r3, [r3, #7]
 8000592:	461a      	mov	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	791b      	ldrb	r3, [r3, #4]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                          //Limpando (zerando) os dois bits para ter certeza que estão zerados antes de fazer o bitwise
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	68da      	ldr	r2, [r3, #12]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	2103      	movs	r1, #3
 80005ae:	fa01 f303 	lsl.w	r3, r1, r3
 80005b2:	43db      	mvns	r3, r3
 80005b4:	4619      	mov	r1, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	400a      	ands	r2, r1
 80005bc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68d9      	ldr	r1, [r3, #12]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	430a      	orrs	r2, r1
 80005cc:	60da      	str	r2, [r3, #12]
	temp=0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]

	//4. Configure OUTPUT TYPE, PUSH PULL or OPEN DRAIN
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7a1b      	ldrb	r3, [r3, #8]
 80005d6:	461a      	mov	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));                          //Limpando (zerando) o bit para ter certeza que estão zerados antes de fazer o bitwise
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2301      	movs	r3, #1
 80005f0:	408b      	lsls	r3, r1
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	400a      	ands	r2, r1
 80005fc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6859      	ldr	r1, [r3, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	693a      	ldr	r2, [r7, #16]
 800060a:	430a      	orrs	r2, r1
 800060c:	605a      	str	r2, [r3, #4]
	temp=0;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]

	//5. Configure Alternate Functionality
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) == GPIO_MODE_ALTFN){
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	795b      	ldrb	r3, [r3, #5]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d12b      	bne.n	8000672 <GPIO_Init+0x34e>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;                                            //sempre igual ou a 0 ou a 1
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	08db      	lsrs	r3, r3, #3
 8000620:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->PUPDR &= ~(0xF << (4*temp2));                                                 //Limpando (zerando) os bits para ter certeza que estão zerados antes de fazer o bitwise
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68da      	ldr	r2, [r3, #12]
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	210f      	movs	r1, #15
 8000638:	fa01 f303 	lsl.w	r3, r1, r3
 800063c:	43db      	mvns	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	400a      	ands	r2, r1
 8000646:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ((pGPIOHandle->GPIO_PinConfig.GPIO_AltFunMode) << (4*temp2));   //cada registrador de 32 bits nesse caso tem 8 pinos, temp1 recebe o resto da divisão inteira por 8 vai dizer se devemos mexer no registrador 0 ou no 1
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	7bfa      	ldrb	r2, [r7, #15]
 800064e:	3208      	adds	r2, #8
 8000650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	7a5b      	ldrb	r3, [r3, #9]
 8000658:	461a      	mov	r2, r3
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	4618      	mov	r0, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	7bfa      	ldrb	r2, [r7, #15]
 800066a:	4301      	orrs	r1, r0
 800066c:	3208      	adds	r2, #8
 800066e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		                                                                                                   //dado qual registrador (0 ou 1) temos que saber a posição do pino que queremos mexer (normalizado entre 0 e 8), multiplicamos por 4 pois são 4 bits para right shift
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   //ex, digamos que queremos escrever o modo alternativo correspondente a 1010 no pino 9 do GPIOA. Entao 9/8 = 1, ou seja, registrador AFR[1]. Qual posição? A posição 9%8 = 1, portanto posição 1 do registrador 1
	}																									   //mas como temos 4 bits por posição, temos que dar um shift left na posição multiplicado por 4, então 4*posicao = 4*1 = 4 de shift.
}
 8000672:	bf00      	nop
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40013800 	.word	0x40013800
 8000684:	40013c00 	.word	0x40013c00

08000688 <PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t En) //Controlar o Clock de um periféico é equivalente a habilitá-lo ou desabilitá-lo
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	if(En == ENABLE){
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d162      	bne.n	8000760 <PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a64      	ldr	r2, [pc, #400]	; (8000830 <PeriClockControl+0x1a8>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d106      	bne.n	80006b0 <PeriClockControl+0x28>
			GPIOA_PCLOCK_EN();
 80006a2:	4b64      	ldr	r3, [pc, #400]	; (8000834 <PeriClockControl+0x1ac>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a63      	ldr	r2, [pc, #396]	; (8000834 <PeriClockControl+0x1ac>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOI){
			GPIOI_PCLOCK_DI();
		}
	}
}
 80006ae:	e0b9      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB){
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a61      	ldr	r2, [pc, #388]	; (8000838 <PeriClockControl+0x1b0>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d106      	bne.n	80006c6 <PeriClockControl+0x3e>
			GPIOB_PCLOCK_EN();
 80006b8:	4b5e      	ldr	r3, [pc, #376]	; (8000834 <PeriClockControl+0x1ac>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	4a5d      	ldr	r2, [pc, #372]	; (8000834 <PeriClockControl+0x1ac>)
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c4:	e0ae      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a5c      	ldr	r2, [pc, #368]	; (800083c <PeriClockControl+0x1b4>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d106      	bne.n	80006dc <PeriClockControl+0x54>
			GPIOC_PCLOCK_EN();
 80006ce:	4b59      	ldr	r3, [pc, #356]	; (8000834 <PeriClockControl+0x1ac>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a58      	ldr	r2, [pc, #352]	; (8000834 <PeriClockControl+0x1ac>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006da:	e0a3      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a58      	ldr	r2, [pc, #352]	; (8000840 <PeriClockControl+0x1b8>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d106      	bne.n	80006f2 <PeriClockControl+0x6a>
			GPIOD_PCLOCK_EN();
 80006e4:	4b53      	ldr	r3, [pc, #332]	; (8000834 <PeriClockControl+0x1ac>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e8:	4a52      	ldr	r2, [pc, #328]	; (8000834 <PeriClockControl+0x1ac>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f0:	e098      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a53      	ldr	r2, [pc, #332]	; (8000844 <PeriClockControl+0x1bc>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <PeriClockControl+0x80>
			GPIOE_PCLOCK_EN();
 80006fa:	4b4e      	ldr	r3, [pc, #312]	; (8000834 <PeriClockControl+0x1ac>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a4d      	ldr	r2, [pc, #308]	; (8000834 <PeriClockControl+0x1ac>)
 8000700:	f043 0310 	orr.w	r3, r3, #16
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000706:	e08d      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a4f      	ldr	r2, [pc, #316]	; (8000848 <PeriClockControl+0x1c0>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d106      	bne.n	800071e <PeriClockControl+0x96>
			GPIOF_PCLOCK_EN();
 8000710:	4b48      	ldr	r3, [pc, #288]	; (8000834 <PeriClockControl+0x1ac>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000714:	4a47      	ldr	r2, [pc, #284]	; (8000834 <PeriClockControl+0x1ac>)
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800071c:	e082      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a4a      	ldr	r2, [pc, #296]	; (800084c <PeriClockControl+0x1c4>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d106      	bne.n	8000734 <PeriClockControl+0xac>
			GPIOG_PCLOCK_EN();
 8000726:	4b43      	ldr	r3, [pc, #268]	; (8000834 <PeriClockControl+0x1ac>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a42      	ldr	r2, [pc, #264]	; (8000834 <PeriClockControl+0x1ac>)
 800072c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000732:	e077      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a46      	ldr	r2, [pc, #280]	; (8000850 <PeriClockControl+0x1c8>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d106      	bne.n	800074a <PeriClockControl+0xc2>
			GPIOH_PCLOCK_EN();
 800073c:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <PeriClockControl+0x1ac>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	4a3c      	ldr	r2, [pc, #240]	; (8000834 <PeriClockControl+0x1ac>)
 8000742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000746:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000748:	e06c      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a41      	ldr	r2, [pc, #260]	; (8000854 <PeriClockControl+0x1cc>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d168      	bne.n	8000824 <PeriClockControl+0x19c>
			GPIOI_PCLOCK_EN();
 8000752:	4b38      	ldr	r3, [pc, #224]	; (8000834 <PeriClockControl+0x1ac>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a37      	ldr	r2, [pc, #220]	; (8000834 <PeriClockControl+0x1ac>)
 8000758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800075e:	e061      	b.n	8000824 <PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a33      	ldr	r2, [pc, #204]	; (8000830 <PeriClockControl+0x1a8>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d106      	bne.n	8000776 <PeriClockControl+0xee>
			GPIOA_PCLOCK_DI();
 8000768:	4b32      	ldr	r3, [pc, #200]	; (8000834 <PeriClockControl+0x1ac>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	4a31      	ldr	r2, [pc, #196]	; (8000834 <PeriClockControl+0x1ac>)
 800076e:	f023 0301 	bic.w	r3, r3, #1
 8000772:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000774:	e056      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB){
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a2f      	ldr	r2, [pc, #188]	; (8000838 <PeriClockControl+0x1b0>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <PeriClockControl+0x104>
			GPIOB_PCLOCK_DI();
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <PeriClockControl+0x1ac>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <PeriClockControl+0x1ac>)
 8000784:	f023 0302 	bic.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
}
 800078a:	e04b      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a2b      	ldr	r2, [pc, #172]	; (800083c <PeriClockControl+0x1b4>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d106      	bne.n	80007a2 <PeriClockControl+0x11a>
			GPIOC_PCLOCK_DI();
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <PeriClockControl+0x1ac>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	4a26      	ldr	r2, [pc, #152]	; (8000834 <PeriClockControl+0x1ac>)
 800079a:	f023 0304 	bic.w	r3, r3, #4
 800079e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007a0:	e040      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a26      	ldr	r2, [pc, #152]	; (8000840 <PeriClockControl+0x1b8>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d106      	bne.n	80007b8 <PeriClockControl+0x130>
			GPIOD_PCLOCK_DI();
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <PeriClockControl+0x1ac>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <PeriClockControl+0x1ac>)
 80007b0:	f023 0308 	bic.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b6:	e035      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <PeriClockControl+0x1bc>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d106      	bne.n	80007ce <PeriClockControl+0x146>
			GPIOE_PCLOCK_DI();
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <PeriClockControl+0x1ac>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <PeriClockControl+0x1ac>)
 80007c6:	f023 0310 	bic.w	r3, r3, #16
 80007ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007cc:	e02a      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <PeriClockControl+0x1c0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <PeriClockControl+0x15c>
			GPIOF_PCLOCK_DI();
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <PeriClockControl+0x1ac>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <PeriClockControl+0x1ac>)
 80007dc:	f023 0320 	bic.w	r3, r3, #32
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e2:	e01f      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a19      	ldr	r2, [pc, #100]	; (800084c <PeriClockControl+0x1c4>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <PeriClockControl+0x172>
			GPIOG_PCLOCK_DI();
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <PeriClockControl+0x1ac>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a10      	ldr	r2, [pc, #64]	; (8000834 <PeriClockControl+0x1ac>)
 80007f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007f8:	e014      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <PeriClockControl+0x1c8>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d106      	bne.n	8000810 <PeriClockControl+0x188>
			GPIOH_PCLOCK_DI();
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <PeriClockControl+0x1ac>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <PeriClockControl+0x1ac>)
 8000808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800080e:	e009      	b.n	8000824 <PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a10      	ldr	r2, [pc, #64]	; (8000854 <PeriClockControl+0x1cc>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d105      	bne.n	8000824 <PeriClockControl+0x19c>
			GPIOI_PCLOCK_DI();
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <PeriClockControl+0x1ac>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081c:	4a05      	ldr	r2, [pc, #20]	; (8000834 <PeriClockControl+0x1ac>)
 800081e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000822:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	40020000 	.word	0x40020000
 8000834:	40023800 	.word	0x40023800
 8000838:	40020400 	.word	0x40020400
 800083c:	40020800 	.word	0x40020800
 8000840:	40020c00 	.word	0x40020c00
 8000844:	40021000 	.word	0x40021000
 8000848:	40021400 	.word	0x40021400
 800084c:	40021800 	.word	0x40021800
 8000850:	40021c00 	.word	0x40021c00
 8000854:	40022000 	.word	0x40022000

08000858 <SPI_Init>:

/*
 * Init and De-Init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)   //O usuario vai instanciar uma struct do tipo SPI_Handle_t e vai configurar e passar como parametro para inicialização
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

	//Inicializando também o clock desse periférico para não esquecer
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2101      	movs	r1, #1
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f862 	bl	8000930 <SPI_PeriClockControl>

	// Vamos primeiramente configurar os registradores do SPI dado o parâmetro recebido acima
	uint32_t temp = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]

	// 1. Primeiramente começando pelo Modo
	temp |= (pSPIHandle->SPI_PinConfig.SPI_DeviceMode << SPI_CR1_MODE);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	791b      	ldrb	r3, [r3, #4]
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4313      	orrs	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]

	//2. Bus Config
	if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	795b      	ldrb	r3, [r3, #5]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d104      	bne.n	8000890 <SPI_Init+0x38>
		temp &= ~(1 << 15); //bit resetado para habilitar full duplex mode
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e014      	b.n	80008ba <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	795b      	ldrb	r3, [r3, #5]
 8000894:	2b02      	cmp	r3, #2
 8000896:	d104      	bne.n	80008a2 <SPI_Init+0x4a>
		temp |= (1 << 15); //bit setado para habilitar half duplex mode
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	e00b      	b.n	80008ba <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX){
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	795b      	ldrb	r3, [r3, #5]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d107      	bne.n	80008ba <SPI_Init+0x62>
		temp &= ~(1 << 15); //bit resetado para habilitar full duplex mode
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008b0:	60fb      	str	r3, [r7, #12]
		temp |= (1 << 10); // simplex mode
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b8:	60fb      	str	r3, [r7, #12]
	}

	//3. SPI Clock Speed
	temp |= (pSPIHandle->SPI_PinConfig.SPI_SCLKSpeed << SPI_CR1_BR);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	799b      	ldrb	r3, [r3, #6]
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	461a      	mov	r2, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]

	//4. SPI Data Frame Format - DFF
	temp |= (pSPIHandle->SPI_PinConfig.SPI_DFF << SPI_CR1_DFF);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	79db      	ldrb	r3, [r3, #7]
 80008cc:	02db      	lsls	r3, r3, #11
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]

	//5. SPI CPOL
	temp |= (pSPIHandle->SPI_PinConfig.SPI_CPOL << SPI_CR1_CPOL);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7a1b      	ldrb	r3, [r3, #8]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	461a      	mov	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]

	//6. SPI CPHA
	temp |= (pSPIHandle->SPI_PinConfig.SPI_CPHA << SPI_CR1_CPHA);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7a5b      	ldrb	r3, [r3, #9]
 80008e8:	461a      	mov	r2, r3
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]

	//Aqui transferimos a configuração para o periférico mapeado naquele SPI propriamente dito
	pSPIHandle->pSPIx->CR1 |= temp;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	6819      	ldr	r1, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <SPI_GetFlagStatus>:
		SPI3_REG_RST();
	}
}

//nesta função deveremos passar o periférico que queremos monitorar e qual a flag monitorada
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t nomeDaFlag){
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & nomeDaFlag){   //lembrando que a flag nomeDaFlag já é um bit deslocado de acordo com o próprio nome da flag que se quer monitorar, no caso nomeDaFlag == SPI_TXE_FLAG == (1 << SPI_SR_TXE) == (1 << 1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	4013      	ands	r3, r2
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 800091e:	2301      	movs	r3, #1
 8000920:	e000      	b.n	8000924 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SPI_PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t En)                        //dado um base address de um SPI a gente habilita ou desabilita seu clock
{														                           //En = 1 habilita, En = 0 desabilita
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
	if(En == ENABLE){
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d120      	bne.n	8000984 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1){
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a22      	ldr	r2, [pc, #136]	; (80009d0 <SPI_PeriClockControl+0xa0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d106      	bne.n	8000958 <SPI_PeriClockControl+0x28>
			SPI1_PCLOCK_EN();
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 8000950:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if (pSPIx == SPI3){
			SPI3_PCLOCK_DI();
		}
	}
}
 8000956:	e035      	b.n	80009c4 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI2){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <SPI_PeriClockControl+0xa8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d106      	bne.n	800096e <SPI_PeriClockControl+0x3e>
			SPI2_PCLOCK_EN();
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800096c:	e02a      	b.n	80009c4 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI3){
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <SPI_PeriClockControl+0xac>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d126      	bne.n	80009c4 <SPI_PeriClockControl+0x94>
			SPI3_PCLOCK_EN();
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 800097c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000982:	e01f      	b.n	80009c4 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <SPI_PeriClockControl+0xa0>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d106      	bne.n	800099a <SPI_PeriClockControl+0x6a>
			SPI1_PCLOCK_DI();
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 800098e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000990:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 8000992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000996:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000998:	e014      	b.n	80009c4 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI2){
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <SPI_PeriClockControl+0xa8>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d106      	bne.n	80009b0 <SPI_PeriClockControl+0x80>
			SPI2_PCLOCK_DI();
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 80009a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009ae:	e009      	b.n	80009c4 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI3){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <SPI_PeriClockControl+0xac>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d105      	bne.n	80009c4 <SPI_PeriClockControl+0x94>
			SPI3_PCLOCK_DI();
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <SPI_PeriClockControl+0xa4>)
 80009be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009c2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	40013000 	.word	0x40013000
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40003800 	.word	0x40003800
 80009dc:	40003c00 	.word	0x40003c00

080009e0 <SPI_Send>:
 * do Status Register avise que o TX buffer está vazio para escrita. Isso significa que se houver algum mau funcionamento
 * de hardware ou mesmo de firmware que dê um set nessa flag o programa vai ficar parado nessa função, essa é uma das desvantagens
 * de se usar polling para send ou receive de mensagens
 */
void SPI_Send(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)   //o primeiro parametro é o endereço de onde está mapeado (pelo memoery map) aquele SPI em questão
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	while(len>0){                                                      //enquanto len não for nulo (ainda não enviou toda a mensagem)
 80009ec:	e027      	b.n	8000a3e <SPI_Send+0x5e>

		//1. Wait until TXE is set
		//while(!(pSPIx->SR & (1 << SPI_SR_TXE)));                     //espere até a flag do Tx avisar que o TX buffer está vazio (pronto para enviar byte) para sair do loop
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);   //essa espera é o que caracteriza o polling do código
 80009ee:	bf00      	nop
 80009f0:	2102      	movs	r1, #2
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f7ff ff88 	bl	8000908 <SPI_GetFlagStatus>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d0f8      	beq.n	80009f0 <SPI_Send+0x10>

		//2. Format is 8 or 16 bits?
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){                           //verificar se é 1 byte por vez ou 2
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00e      	beq.n	8000a28 <SPI_Send+0x48>

			//16 bits format
			pSPIx->DR = *(uint16_t*)pTxBuffer;                         //colocar o dado no registrador de dados (DR) que vai enviar, note que primeiro fazemos um type cast de uint8_t para uint16_t. Depois pegamos o conteúdo dentro do ponteiro usando o operador de de-referenciação
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	60da      	str	r2, [r3, #12]
			len--;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
			len--;                                                     //duas vezes pois são dois bytes enviados
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
			//(uint16_t*)pTxBuffer++;                                    //incrementar duas posições na memória, por isso o casting antes
			pTxBuffer+=2;
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3302      	adds	r3, #2
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	e00a      	b.n	8000a3e <SPI_Send+0x5e>
		}
		else {

			//8 bits format
			pSPIx->DR = *pTxBuffer;
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	60da      	str	r2, [r3, #12]
			len--;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
			pTxBuffer++;                                              //incrementar uma única posição
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
	while(len>0){                                                      //enquanto len não for nulo (ainda não enviou toda a mensagem)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1d4      	bne.n	80009ee <SPI_Send+0xe>
		}
	}
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <SPI_PeripheralControl>:
//pois ainda existe uma flag a ser setada, que é justamente a flag de enable. Essa flag serve para que as configurações de clock e
//do SPI propriamente dito sejam alteradas apenas quando o periférico estiver desabilitado. A partir do momento que essa flag é habilitada
//não é possível mais fazer alterações na configuração do SPI, sendo que para configurar é necessário desabilitar mais uma vez essa flag e
//mexer nas configurações

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	460b      	mov	r3, r1
 8000a58:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d106      	bne.n	8000a6e <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a6c:	e005      	b.n	8000a7a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <__libc_init_array>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	4d0d      	ldr	r5, [pc, #52]	; (8000ac0 <__libc_init_array+0x38>)
 8000a8c:	4c0d      	ldr	r4, [pc, #52]	; (8000ac4 <__libc_init_array+0x3c>)
 8000a8e:	1b64      	subs	r4, r4, r5
 8000a90:	10a4      	asrs	r4, r4, #2
 8000a92:	2600      	movs	r6, #0
 8000a94:	42a6      	cmp	r6, r4
 8000a96:	d109      	bne.n	8000aac <__libc_init_array+0x24>
 8000a98:	4d0b      	ldr	r5, [pc, #44]	; (8000ac8 <__libc_init_array+0x40>)
 8000a9a:	4c0c      	ldr	r4, [pc, #48]	; (8000acc <__libc_init_array+0x44>)
 8000a9c:	f000 f818 	bl	8000ad0 <_init>
 8000aa0:	1b64      	subs	r4, r4, r5
 8000aa2:	10a4      	asrs	r4, r4, #2
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	42a6      	cmp	r6, r4
 8000aa8:	d105      	bne.n	8000ab6 <__libc_init_array+0x2e>
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
 8000aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab0:	4798      	blx	r3
 8000ab2:	3601      	adds	r6, #1
 8000ab4:	e7ee      	b.n	8000a94 <__libc_init_array+0xc>
 8000ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aba:	4798      	blx	r3
 8000abc:	3601      	adds	r6, #1
 8000abe:	e7f2      	b.n	8000aa6 <__libc_init_array+0x1e>
 8000ac0:	08000af4 	.word	0x08000af4
 8000ac4:	08000af4 	.word	0x08000af4
 8000ac8:	08000af4 	.word	0x08000af4
 8000acc:	08000af8 	.word	0x08000af8

08000ad0 <_init>:
 8000ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad2:	bf00      	nop
 8000ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad6:	bc08      	pop	{r3}
 8000ad8:	469e      	mov	lr, r3
 8000ada:	4770      	bx	lr

08000adc <_fini>:
 8000adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ade:	bf00      	nop
 8000ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae2:	bc08      	pop	{r3}
 8000ae4:	469e      	mov	lr, r3
 8000ae6:	4770      	bx	lr
