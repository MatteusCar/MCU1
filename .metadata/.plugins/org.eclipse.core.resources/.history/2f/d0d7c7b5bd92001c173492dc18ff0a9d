/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stm32f407xx.h>
#include <stdio.h>
#include <string.h>

void delay()
{
	for(uint32_t i=0; i<500000; i++);
}

int main(void)
{
	GPIO_Handle_t GpioLed;

	memset(&GpioLed, 0, sizeof(GpioLed));

	GpioLed.pGPIOx = GPIOD;
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
	GpioLed.GPIO_PinConfig.GPIO_PinMode =   GPIO_MODE_OUT;
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PU_PD;

	PeriClockControl(GPIOD, ENABLE);
	GPIO_Init(&GpioLed);

	while(1){
		ToggleOutputPin(GPIOD, GPIO_PIN_12);
		delay();
	}
    return 0;
}

//Se a interrupção foi confugurada corretamente para o EXTIO0 o processador irá localizar a
//função abaixo
void EXTI0_IRQHandler(void)
{
	//Handle the interruption - Primeiramente a função abaixo irá limpar os registradores de interrupção
	//para ela não ficar infinitamente ativa (o que travaria o código)
	GPIO_IRQHandler(0);

	//A partir daqui escreva o código que rodará assim que a interrupção for detectada


}








