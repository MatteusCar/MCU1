/*
 * stm32f407xx_gpio_driver.h
 *
 *  Created on: Jan 17, 2022
 *      Author: matte
 */

#ifndef INC_STM32F407XX_GPIO_DRIVER_H_
#define INC_STM32F407XX_GPIO_DRIVER_H_

#include "stm32f407xx.h"

typedef struct{
	uint8_t GPIO_PinNumber;
	uint8_t GPIO_PinMode;
	uint8_t GPIO_PinSpeed;
	uint8_t GPIO_PinPuPdControl;
	uint8_t GPIO_PinOPType;
	uint8_t GPIO_AltFunMode;
}GPIO_PinConfig_t;

typedef struct
{
	GPIO_RegDef_t *pGPIOx;                    //ponteiro para acesso rápido à GPIOx em questão, ex: pGPIOx = GPIOA
	GPIO_PinConfig_t GPIO_PinConfig;          //faz pGPOIx apontar para o endereço do GPIOA (seu base Address)
						                      //então pGPIOx -> MODER = 25 já acessa direto o registrador MODER da GPIOA
}GPIO_Handle_t;


/*
 * GPIO Modes
 */
#define GPIO_MODE_IN       0  //Input Mode
#define GPIO_MODE_OUT      1  //Output Mode
#define GPIO_MODE_ALTFN    2  //Alternate Function (Depending on the specific Pin, see datasheet)
#define GPIO_MODE_ANALOG   3  //Analog Mode
#define GPIO_MODE_IT_FT    4  //Interrupt input falling edge trigger
#define GPIO_MODE_IT_RT    5  //Interrupt input rising  edge trigger
#define GPIO_MODE_RFT      6  //...rising falling edge trigger

/*
 * GPIO Output Types like (Push Pull or Open Drain)
 */
#define GPIO_OP_TYPE_PP	0
#define GPIO_OP_TYPE_OD	1

/*
 * GPIO possible speeds
 */
#define GPIO_SPEED_LOW     0
#define GPIO_SPEED_MEDIUM  1
#define GPIO_SPEED_FAST    2
#define GPIO_SPEED_HIGH    3

/*
 * Init and De-Init
 */
void init(GPIO_Handle_t *pGPIOHandle);        //O usuario vai instanciar uma struct do tipo GPIO_Handle_t e vai configurar e passar como parametro para inicialização
void deInit(GPIO_RegDef_t *pGPIOx);

/*
 * Peripheral Clock Setup
 */
void PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t En);                        //dado um base address de uma GPIO a gente habilita ou desabilita seu clock
														                         //En = 1 habilita, En = 0 desabilita
/*
 * Read and Write
 */
uint8_t ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pin);                    //primeiro parametro diz qual GPIOx, e o segundo diz qual pino desse GPIOx
uint16_t ReadFromInputPort(GPIO_RegDef_t *pGPIOx);                               //aqui vai retornar 16 bits ou seja, o valor de cada porta da GPIOx
void WriteFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pin, uint8_t value);       //value = 0 ou 1
void WriteFromInputPort(GPIO_RegDef_t *pGPIOx, uint16_t value);
void ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pin);

/*
 * Interrupt Service Routine (ISR) Handling and Interrupt Routine Queue Configuration
 */
void GPIO_IRQConfig(uint8_t IRQnumber, uint8_t IRQpriority, uint8_t  IRQEn);
void GPIO_IRQHandler(uint8_t pin);                                               //Interrupção externa ativda por esse pino será gerenciada


#endif /* INC_STM32F407XX_GPIO_DRIVER_H_ */
